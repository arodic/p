// Converted from: ./flatroof_RoofTexture_13.obj
//  vertices: 385
//  faces: 140
//  normals: 0
//  colors: 0
//  uvs: 551
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[0.0002,1,1,1,0.9975,0.0007,0,0,0.0002,1,1,1,0.9977,0,0,0,0.0002,1,1,1,0.9977,0,0,0,0.0002,1,1,1,0.9977,0,0,0,0.0002,1,1,1,0.9977,0,0,0,1,0,0,0,0,1,1,1,1,0,0.1234,0.9939,0.1786,1,1,1,0,1,0.8766,0.0061,0.8214,0,0,0,1,0,0.1234,0.9939,0.1786,1,1,1,0,0,0.9939,0.8766,1,0.8214,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0.0239,0.0736,0.125,0,0.0864,0.0087,0.0515,0.0341,0.0239,0.0736,0.125,0,0.0864,0.0087,0.0515,0.0341,0.0239,0.0736,0.125,0,0.0864,0.0087,0.0515,0.0341,0.0239,0.0736,0.125,0,0.0864,0.0087,0.0515,0.0341,1,1,1,0,0,0,0,1,0.9996,1,0.001,0.2168,0,1,0.9993,0,0.0035,0,0,1,1,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0.8145,0.00010002,1,1,0.9996,0,0.9905,0,0,0,0.0004,1,1,1,0.9905,0,0,0,0.0004,1,1,1,0.9905,0,0,0,0.0004,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0.1122,0.8785,0,0.8785,0,1,1,1,0.1122,0.8785,1,1,1,0,0.2286,0.5269,0.1122,0.5269,0.1122,0.8785,0.2286,0.5269,1,0,0.2286,0,0.2286,0.5269,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0.0189,0.4342,0.2951,0.0999,0.1716,0.193,0.0774,0.307,0.75,0.0921,0.933,0.3436,0.8536,0.2013,0.0319,0.5651,0.2086,0.3059,0.1031,0.4332,0.8536,0.1918,0.983,0.4853,0.933,0.3274,0.75,0.0856,0.933,0.3193,0.8536,0.187,0.9997,1,1,0.00089997,0.0004,0,0,1,0.9991,0,0,0,0.0002,1,1,1,0.9991,0,0,0,0.0002,1,1,1,0.017,0.8038,0.067,0.9578,0.0923,1,0.9077,1,0.017,0.8038,0.9077,1,0.017,0.4733,0,0.6386,0.017,0.4733,0.9077,1,0.1464,0.187,0.067,0.3193,0.1464,0.187,0.9077,1,0.933,0.9578,0.25,0.0856,0.25,0.0856,0.933,0.9578,0.983,0.8038,0.3706,0.0218,0.3706,0.0218,0.983,0.8038,1,0.6386,0.5,0,0.5,0,1,0.6386,0.983,0.4733,0.6294,0.0218,0.6294,0.0218,0.983,0.4733,0.933,0.3193,0.75,0.0856,0.017,0.8243,0.067,0.9822,0.0774,1,0.9226,1,0.017,0.8243,0.9226,1,0.017,0.4853,0,0.6548,0.017,0.4853,0.9226,1,0.1464,0.1918,0.067,0.3274,0.1464,0.1918,0.9226,1,0.3706,0.0223,0.25,0.0877,0.3706,0.0223,0.9226,1,0.933,0.9822,0.5,0,0.5,0,0.933,0.9822,0.983,0.8243,0.6294,0.0223,0.6294,0.0223,0.983,0.8243,1,0.6548,0.75,0.0877,0.75,0.0877,1,0.6548,0.983,0.4853,0.8536,0.1918,0.8736,0.8067,1,0.698,0.7991,0,0.7228,0.8999,0.7228,0.8999,0.7991,0,0.4084,1,0.5641,0.9659,0.4084,1,0.7991,0,0.1473,0.9659,0.2662,1,0.1473,0.9659,0.7991,0,0.6508,0.0325,0.0597,0.8999,0.0597,0.8999,0.6508,0.0325,0.4921,0.0984,0.0095,0.8067,0.0095,0.8067,0.4921,0.0984,0.3413,0.1917,0,0.6925,0,0.6925,0.3413,0.1917,0.2086,0.3059,0.0319,0.5651,0.017,0.8651,0.0577,1,0.9423,1,0,0.6873,0,0.6873,0.9423,1,0.067,0.3436,0.017,0.5094,0.067,0.3436,0.9423,1,0.25,0.0921,0.1464,0.2013,0.25,0.0921,0.9423,1,0.983,0.8651,0.3706,0.0234,0.3706,0.0234,0.983,0.8651,1,0.6873,0.5,0,0.5,0,1,0.6873,0.983,0.5094,0.6294,0.0234,0.6294,0.0234,0.983,0.5094,0.933,0.3436,0.75,0.0921,0.4395,0.0341,0.2951,0.0999,0.0189,0.4342,0,0.5658,0.4395,0.0341,0,0.5658,0.0221,0.693,0.5949,0,0.5949,0,0.0221,0.693,0.0837,0.807,0.7507,0,0.7507,0,0.0837,0.807,0.1805,0.9001,0.8963,0.0341,0.8963,0.0341,0.1805,0.9001,0.3061,0.9659,0.9906,0.0835,0.9906,0.0835,0.3061,0.9659,0.4517,1,1,0.8302,1,0.8302,0.4517,1,0.6075,1,0.9072,0.9001,0.9072,0.9001,0.6075,1,0.7629,0.9659,0.0094,1,1,1,0.8145,0.00010002,0,0.0012,0.9996,1,1,0.005,0.0016,0,0.001,0.2168,1,1,1,0.1786,0.9939,0.1234,0,1,0,1,0.9939,0.1234,0.9761,0.0736,0.9485,0.0341,0,1,0.9485,0.0341,0.9136,0.0087,0,0.1786,0,0.1786,0.9136,0.0087,0.875,0,0.0061,0.1234,0.0061,0.1234,0.875,0,0.125,0,0.0239,0.0736,1,1,1,0.1786,0.9939,0.1234,0,1,0,1,0.9939,0.1234,0.9761,0.0736,0.9485,0.0341,0,1,0.9485,0.0341,0.9136,0.0087,0,0.1786,0,0.1786,0.9136,0.0087,0.875,0,0.0061,0.1234,0.0061,0.1234,0.875,0,0.125,0,0.0239,0.0736,1,1,1,0.1786,0.9939,0.1234,0,1,0,1,0.9939,0.1234,0.9761,0.0736,0.9485,0.0341,0,1,0.9485,0.0341,0.9136,0.0087,0,0.1786,0,0.1786,0.9136,0.0087,0.875,0,0.0061,0.1234,0.0061,0.1234,0.875,0,0.125,0,0.0239,0.0736,1,1,1,0.1786,0.9939,0.1234,0,1,0,1,0.9939,0.1234,0.9761,0.0736,0.9485,0.0341,0,1,0.9485,0.0341,0.9136,0.0087,0,0.1786,0,0.1786,0.9136,0.0087,0.875,0,0.0061,0.1234,0.0061,0.1234,0.875,0,0.125,0,0.0239,0.0736,0,0,0,0.8214,0.9136,0.9913,0.9485,0.9659,0.9136,0.9913,0,0.8214,0.125,1,0.875,1,0.125,1,0,0.8214,0.0061,0.8766,0.0864,0.9913,0.0864,0.9913,0.0061,0.8766,0.0239,0.9264,0.0515,0.9659,0,0,0.9485,0.9659,0.9761,0.9264,0.9939,0.8766,1,0,0.1786,0,0.0087,0.9136,0.0341,0.9485,0.0087,0.9136,0.1786,0,0,0.125,0,0.875,0,0.125,0.1786,0,0.1234,0.0061,0.0087,0.0864,0.0087,0.0864,0.1234,0.0061,0.0736,0.0239,0.0341,0.0515,1,0,0.0341,0.9485,0.0736,0.9761,0.1234,0.9939,0,1,0.8214,1,0.9913,0.0864,0.9659,0.0515,0.9913,0.0864,0.8214,1,1,0.875,1,0.125,1,0.875,0.8214,1,0.8766,0.9939,0.9913,0.9136,0.9913,0.9136,0.8766,0.9939,0.9264,0.9761,0.9659,0.9485,0,1,0.9659,0.0515,0.9264,0.0239,0.8766,0.0061,1,0,0.1786,0,0.0087,0.9136,0.0341,0.9485,0.0087,0.9136,0.1786,0,0,0.125,0,0.875,0,0.125,0.1786,0,0.1234,0.0061,0.0087,0.0864,0.0087,0.0864,0.1234,0.0061,0.0736,0.0239,0.0341,0.0515,1,0,0.0341,0.9485,0.0736,0.9761,0.1234,0.9939]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture_13.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 1155;
  var numMorphTargets = model.morphTargets.length;
  var scale = 1.78888034766;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 1382;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
