// Converted from: ./flatroof_RoofTexture_4.obj
//  vertices: 491
//  faces: 190
//  normals: 0
//  colors: 0
//  uvs: 743
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[0.0005,0,0,1,1,1,0.9996,0.00089997,0.9994,1,1,0,0.0006,0.00080001,0,1,0.9994,1,1,0,0.0006,0.00080001,0,1,0.0012,0,0,1,0.9988,1,1,0.00080001,0.0012,0,0,1,0.9988,1,1,0.00080001,0.0908,1,1,1,0.9092,0,0,0,1,1,1,0,0,0,0,1,0.0061,0.13,0.0864,0.0092,0.0515,0.0359,0.0239,0.0775,1,1,1,0,0,0,0,1,0.1619,0,0.9145,0.9933,1,0.6027,1,1,0.0126,0.6342,0.0513,1,0.885,1,0.0834,0.4231,0,0.8218,0.2368,1,0.8952,1,0.0834,0.4528,0,0.8795,0.1496,1,0.885,1,0.0834,0.4231,0,0.8218,0.2368,1,0.8952,1,0.0834,0.4528,0,0.8795,0.1496,1,0.885,1,0.0834,0.4231,0,0.8218,0.2368,1,0.8952,1,0.0834,0.4528,0,0.8795,0.1496,1,0.8952,1,0.0834,0.4528,0,0.8795,0.1496,1,0.0006,0,0,1,1,1,1,0.00089997,0.0016,0,0,1,0.9984,1,1,0.00080001,0.0016,0,0,1,0.9984,1,1,0.00080001,0.0016,0,0,1,0.9984,1,1,0.00080001,0.0009,1,1,1,0.9984,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,1,0.0061,0.1302,0,0.1885,0,1,1,1,0.0061,0.1302,0,0.1885,0,1,1,1,0.0061,0.1302,0,0.1885,0,1,1,1,0.0061,0.1302,0,0.1885,0,1,1,1,1,0,0,0,0,1,0.976,0.2797,0.7955,0.5296,0.8977,0.4025,0.0671,0.7626,0.018,0.7945,0,0.8936,0.0508,0.8525,0.0508,0.8525,0,0.8936,0.0192,0.9637,0.0682,0.916,0.0682,0.916,0.0192,0.9637,0.0743,1,0.1181,0.9489,0.1181,0.9489,0.0743,1,0.1615,1,0.1973,0.9489,0.7998,0.9169,0.5498,0.9494,0.686,0.9494,0.5498,0.9494,0.5695,1,0.7196,1,0.686,0.9494,0.686,0.9494,0.7196,1,0.8451,0.9641,0.7998,0.9169,0.7998,0.9169,0.8451,0.9641,0.9375,0.8948,0.8836,0.854,0.8836,0.854,0.9375,0.8948,0.9903,0.7967,0.9315,0.765,0.9315,0.765,0.9903,0.7967,1,0.6766,0.9403,0.6561,0.9403,0.6561,1,0.6766,0.966,0.5426,0.9094,0.5346,0.9094,0.5346,0.966,0.5426,0.8905,0.4039,0.841,0.4088,0.841,0.4088,0.8905,0.4039,0.7787,0.27,0.7396,0.2873,0,0,0,0.9386,1,0.9386,1,0,1,1,1,0.9386,0,0.9386,0,1,1,0.9316,1,0,0,0,0,0.9316,0,0.9316,0,1,1,1,1,0.9316,0.9964,1,1,0,0.0051,0.00010002,0,1,0.0015,0,0,1,0.9985,1,1,0.00010002,0.8241,0,0.0874,1,1,1,1,0.1821,0,0.1821,0,1,1,1,1,0.7275,0.1873,1,0.8127,1,1,1,0.6606,0,0,0.7324,0.0028,1,0,0.6277,1,1,0.7091,0,0.3295,0,0,1,0.9091,1,1,0.4809,0.175,0,1,0,0.1542,0,0,1,0.8458,1,1,0,0.1542,0,0,1,0.8458,1,1,0,0.1542,0,0,1,0.8458,1,0.983,0.89,0.017,0.89,0.0493,1,0.9507,1,0.067,0.3757,0.3706,0.0256,0.25,0.1007,0.1464,0.2201,0.067,0.3757,0.3706,0.0256,0.25,0.1007,0.1464,0.2201,0.9224,0.7345,0.609,1,0.7317,0.9531,0.8386,0.8626,0.9224,0.7345,0.609,1,0.7317,0.9531,0.8386,0.8626,0.067,0.347,0.3706,0.0236,0.25,0.093,0.1464,0.2033,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0.0426,0,0,1,1,1,0.9636,0.00029999,0.9298,0.0057,0,0,0.0709,1,1,1,0.9298,0.0057,0,0,0.0709,1,1,1,0.9298,0.0057,0,0,0.0709,1,1,1,0.5297,0,0,0,0.9298,0.0057,0.5297,0,0,0,0.9298,0.0057,0.5297,0,0,0,0.9298,0.0057,0.0548,1,0.9452,1,0.933,0.347,0.8536,0.2033,0.933,0.347,0.9452,1,1,0.694,0.983,0.5143,1,0.694,0.9452,1,0.983,0.8736,0.0548,1,0.8536,0.2033,0.75,0.093,0.017,0.8736,0.017,0.8736,0.75,0.093,0.6294,0.0236,0,0.694,0,0.694,0.6294,0.0236,0.5,0,0.017,0.5143,0.017,0.5143,0.5,0,0.3706,0.0236,0.067,0.347,0.9884,0.2217,0.9751,0.1695,0.1315,0.7345,0.2317,0.8626,0.1315,0.7345,0.9751,0.1695,0.0389,0,0.0564,0.5777,0.0564,0.5777,0.0389,0,0,0.2217,0.0116,0.4028,0,0.2217,0.0389,0,0.0225,0.0468,0.9884,0.2217,0.2317,0.8626,0.3501,0.9531,1,0.4028,1,0.4028,0.3501,0.9531,0.4788,1,0.9775,0.5777,0.9775,0.5777,0.4788,1,0.609,1,0.9224,0.7345,0.9884,0.2217,0.9751,0.1695,0.1315,0.7345,0.2317,0.8626,0.1315,0.7345,0.9751,0.1695,0.0389,0,0.0564,0.5777,0.0564,0.5777,0.0389,0,0,0.2217,0.0116,0.4028,0,0.2217,0.0389,0,0.0225,0.0468,0.9884,0.2217,0.2317,0.8626,0.3501,0.9531,1,0.4028,1,0.4028,0.3501,0.9531,0.4788,1,0.9775,0.5777,0.9775,0.5777,0.4788,1,0.609,1,0.9224,0.7345,0.017,0.9459,0.0319,1,0.8536,0.2201,0.75,0.1007,0.8536,0.2201,0.0319,1,0.9681,1,0.933,0.3757,0.933,0.3757,0.9681,1,1,0.7514,0.983,0.557,1,0.7514,0.9681,1,0.983,0.9459,0.017,0.9459,0.75,0.1007,0.6294,0.0256,0,0.7514,0,0.7514,0.6294,0.0256,0.5,0,0.017,0.557,0.017,0.557,0.5,0,0.3706,0.0256,0.067,0.3757,0.017,0.9459,0.0319,1,0.8536,0.2201,0.75,0.1007,0.8536,0.2201,0.0319,1,0.9681,1,0.933,0.3757,0.933,0.3757,0.9681,1,1,0.7514,0.983,0.557,1,0.7514,0.9681,1,0.983,0.9459,0.017,0.9459,0.75,0.1007,0.6294,0.0256,0,0.7514,0,0.7514,0.6294,0.0256,0.5,0,0.017,0.557,0.017,0.557,0.5,0,0.3706,0.0256,0.067,0.3757,0.933,0.3535,0.8536,0.2071,0.1464,0.2071,0.067,0.3535,0.1464,0.2071,0.8536,0.2071,0.75,0.0947,0.25,0.0947,0.25,0.0947,0.75,0.0947,0.6294,0.0241,0.3706,0.0241,0.3706,0.0241,0.6294,0.0241,0.5,0,0.933,0.3535,0.067,0.3535,0.017,0.524,0.983,0.524,0.983,0.524,0.017,0.524,0,0.707,1,0.707,1,0.707,0,0.707,0.017,0.89,0.983,0.89,0.1083,1,1,1,0,0.6277,0.9896,0,0.6606,0,1,1,1,0.7275,0.5,0,0,0.7275,0.1873,1,0.8748,0,0.1252,0,0,0.1821,1,0.1821,0.8241,0,0.3707,0,0,0.5032,0.0874,1,0.1939,0,0,0.6764,0.4675,0.0894,0.3153,0.0265,0.4675,0.0894,0,0.6764,0.7396,0.2873,0.6122,0.1783,0.7396,0.2873,0,0.6764,0.9094,0.5346,0.841,0.4088,0.9094,0.5346,0,0.6764,0.1036,0.765,0.9403,0.6561,0.9403,0.6561,0.1036,0.765,0.2483,0.854,0.9315,0.765,0.9315,0.765,0.2483,0.854,0.4005,0.9169,0.8836,0.854,0.8836,0.854,0.4005,0.9169,0.5498,0.9494,0.7998,0.9169,0.1944,0.5296,0.1161,0.6524,0.0671,0.7626,0.0508,0.8525,0.1944,0.5296,0.0508,0.8525,0.0682,0.916,0.2967,0.4025,0.2967,0.4025,0.0682,0.916,0.1181,0.9489,0.4159,0.2797,0.4159,0.2797,0.1181,0.9489,0.1973,0.9489,0.5441,0.1696,0.5441,0.1696,0.1973,0.9489,0.3002,0.916,0.6723,0.0797,0.6723,0.0797,0.3002,0.916,0.4198,0.8525,0.792,0.0161,0.792,0.0161,0.4198,0.8525,0.5481,0.7626,0.8424,0,0.8424,0,0.5481,0.7626,0.6762,0.6524,1,0.2258,1,0.2258,0.6762,0.6524,0.7955,0.5296,0.976,0.2797,1,1,1,0.1885,0.9485,0.036,0.9136,0.0092,0.9485,0.036,1,0.1885,0.9939,0.1302,0.9761,0.0777,1,1,0.9136,0.0092,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0092,0.0515,0.036,1,1,0.0515,0.036,0.0239,0.0777,0.0061,0.1302,1,1,1,0.1885,0.9485,0.036,0.9136,0.0092,0.9485,0.036,1,0.1885,0.9939,0.1302,0.9761,0.0777,1,1,0.9136,0.0092,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0092,0.0515,0.036,1,1,0.0515,0.036,0.0239,0.0777,0.0061,0.1302,1,1,1,0.1885,0.9485,0.036,0.9136,0.0092,0.9485,0.036,1,0.1885,0.9939,0.1302,0.9761,0.0777,1,1,0.9136,0.0092,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0092,0.0515,0.036,1,1,0.0515,0.036,0.0239,0.0777,0.0061,0.1302,1,1,1,0.1885,0.9485,0.036,0.9136,0.0092,0.9485,0.036,1,0.1885,0.9939,0.1302,0.9761,0.0777,1,1,0.9136,0.0092,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0092,0.0515,0.036,1,1,0.0515,0.036,0.0239,0.0777,0.0061,0.1302,0.7408,0,0.1666,0,0.0834,0.4528,0.8551,0.173,0.8551,0.173,0.0834,0.4528,0.8952,1,1,0.2744,0.7408,0,0.1666,0,0.0834,0.4528,0.8551,0.173,0.8551,0.173,0.0834,0.4528,0.8952,1,1,0.2744,0.7408,0,0.1666,0,0.0834,0.4231,0.8551,0.1616,0.8551,0.1616,0.0834,0.4231,0.885,1,1,0.2564,0.7408,0,0.1666,0,0.0834,0.4528,0.8551,0.173,0.8551,0.173,0.0834,0.4528,0.8952,1,1,0.2744,0.7408,0,0.1666,0,0.0834,0.4231,0.8551,0.1616,0.8551,0.1616,0.0834,0.4231,0.885,1,1,0.2564,0.7408,0,0.1666,0,0.0834,0.4528,0.8551,0.173,0.8551,0.173,0.0834,0.4528,0.8952,1,1,0.2744,0.7408,0,0.1666,0,0.0834,0.4231,0.8551,0.1616,0.8551,0.1616,0.0834,0.4231,0.885,1,1,0.2564,0.8324,0,0,0.5286,0.0126,0.6342,1,1,0,1,0.9131,1,0.9145,0.9933,0.1619,0,1,1,1,0.1881,0.9939,0.13,0.9761,0.0775,1,1,0.9761,0.0775,0.9485,0.0359,0,1,0,1,0.9485,0.0359,0.9136,0.0092,0.875,0,0,1,0.875,0,0.125,0,0,0.1881,0,0.1881,0.125,0,0.0864,0.0092,0.0061,0.13]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture_4.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 1473;
  var numMorphTargets = model.morphTargets.length;
  var scale = 1.67811679883;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 1866;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
