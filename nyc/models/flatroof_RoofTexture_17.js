// Converted from: ./flatroof_RoofTexture_17.obj
//  vertices: 463
//  faces: 181
//  normals: 0
//  colors: 0
//  uvs: 713
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[0.0005,1,1,1,0.9965,0.0011,0,0,0,0,0,0.9515,0.9999,0.9515,0.9999,0,1,1,0.9999,0.9515,0,0.9515,0,1,0,1,1,1,1,0,0,0,1,0.9451,1,0,0,0,0,0.9451,0,0.9451,0,1,1,1,1,0.9451,0.933,0.9558,0.067,0.9558,0.0936,1,0.9064,1,0.1464,0.207,0.5,0,0.3706,0.0241,0.25,0.0947,0.1464,0.1893,0.5,0,0.3706,0.022,0.25,0.0866,1,1,1,0,0,0,0,1,0.0864,0.0087,0.9136,0.0087,0.875,0,0.125,0,1,1,1,0,0,0,0,1,0,1,1,1,0.4771,0,0,1,1,1,0.6397,0,0.3287,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0.0243,0.299,0.0257,0,1,0,0.0287,0,0,1,0.9746,1,0.017,0.5051,0.1464,0.1996,0.067,0.3407,0.933,0.3632,1,0.7265,0.983,0.5385,0,0.393,0.0575,0.1343,0.012,0.2566,0.933,0.3329,1,0.6658,0.983,0.4935,1,0,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0.0735,0.6938,0,0.6938,0,1,1,1,0.0735,0.6938,1,1,1,0,0.0735,0.3135,0.0735,0.3135,1,0,0,0,0,0.3135,0.4738,0.6865,0,1,1,1,1,0.6865,0.4738,0.6865,0,1,1,1,1,0.6865,0,0.1457,1,0.3062,1,0,0,0,0.4738,0.3062,0,0.1457,0,0.8508,0.4738,0.6865,1,0.6865,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,1,1,0.5876,0,0,0,0.4124,1,0.9979,0.0013,0,0,0.0017,1,1,1,0.9971,0,0,0,0.0026,1,1,1,0.9971,0,0,0,0.0026,1,1,1,1,0.1653,0,0.1653,0,1,1,1,0.0239,0.0745,0.125,0,0.0864,0.0088,0.0515,0.0345,0.0239,0.0745,0.125,0,0.0864,0.0088,0.0515,0.0345,0.0239,0.0745,0.125,0,0.0864,0.0088,0.0515,0.0345,1,1,1,0,0,0,0,1,1,1,0.0061,0.1234,0,0.1786,0,1,1,1,0.0061,0.1234,0,0.1786,0,1,1,1,0.0061,0.1234,0,0.1786,0,1,1,1,0.0061,0.1234,0,0.1786,0,1,1,1,0.006,0.1198,0,0.1745,0,1,1,1,0.0058,0.1138,0,0.1677,0,1,1,1,0.0033,0.0743,0,0.1273,0,1,0,1,1,1,1,0,0,0,0.9999,1,1,0,0.0002,0.00040001,0,1,0.0006,0,0,1,0.9994,1,1,0.00040001,0.0006,0,0,1,0.9994,1,1,0.00040001,0.9997,1,1,0,0.0003,0.00040001,0,1,1,1,1,0.1273,0.9773,0.0229,0.9467,0.0045,0.9773,0.0229,1,0.1273,0.9967,0.0743,0.9836,0.0316,1,1,0.9467,0.0045,0.9086,0,0.0914,0,1,1,0.0914,0,0.0533,0.0045,0.0227,0.0229,1,1,0.0227,0.0229,0.0164,0.0316,0.0033,0.0743,1,1,1,0.1677,0.9541,0.032,0.9199,0.0082,0.9541,0.032,1,0.1677,0.9942,0.1138,0.9775,0.0652,1,1,0.9199,0.0082,0.882,0,0.118,0,1,1,0.118,0,0.0801,0.0082,0.0459,0.032,1,1,0.0459,0.032,0.0225,0.0652,0.0058,0.1138,1,1,1,0.1745,0.9505,0.0333,0.9159,0.0085,0.9505,0.0333,1,0.1745,0.994,0.1198,0.9766,0.0705,1,1,0.9159,0.0085,0.8776,0,0.1224,0,1,1,0.1224,0,0.0841,0.0085,0.0495,0.0333,1,1,0.0495,0.0333,0.0234,0.0705,0.006,0.1198,1,1,1,0.1786,0.9485,0.0341,0.9136,0.0087,0.9485,0.0341,1,0.1786,0.9939,0.1234,0.9761,0.0736,1,1,0.9136,0.0087,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0087,0.0515,0.0341,1,1,0.0515,0.0341,0.0239,0.0736,0.0061,0.1234,1,1,1,0.1786,0.9485,0.0341,0.9136,0.0087,0.9485,0.0341,1,0.1786,0.9939,0.1234,0.9761,0.0736,1,1,0.9136,0.0087,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0087,0.0515,0.0341,1,1,0.0515,0.0341,0.0239,0.0736,0.0061,0.1234,1,1,1,0.1786,0.9485,0.0341,0.9136,0.0087,0.9485,0.0341,1,0.1786,0.9939,0.1234,0.9761,0.0736,1,1,0.9136,0.0087,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0087,0.0515,0.0341,1,1,0.0515,0.0341,0.0239,0.0736,0.0061,0.1234,1,1,1,0.1786,0.9485,0.0341,0.9136,0.0087,0.9485,0.0341,1,0.1786,0.9939,0.1234,0.9761,0.0736,1,1,0.9136,0.0087,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0087,0.0515,0.0341,1,1,0.0515,0.0341,0.0239,0.0736,0.0061,0.1234,0,1,1,1,0.9761,0.0745,0.9485,0.0345,0.9761,0.0745,1,1,1,0.1807,0.9939,0.1249,0,1,0.9485,0.0345,0.9136,0.0088,0,0.1807,0,0.1807,0.9136,0.0088,0.875,0,0.0061,0.1249,0.0061,0.1249,0.875,0,0.125,0,0.0239,0.0745,0.875,0,0.125,0,0.0239,0.0745,0.0061,0.1249,0.875,0,0.0061,0.1249,0,0.1807,0.9136,0.0088,0.9136,0.0088,0,0.1807,0,1,0.9485,0.0345,0.9485,0.0345,0,1,1,1,0.9761,0.0745,0.9761,0.0745,1,1,1,0.1807,0.9939,0.1249,0.875,0,0.125,0,0.0239,0.0745,0.0061,0.1249,0.875,0,0.0061,0.1249,0,0.1807,0.9136,0.0088,0.9136,0.0088,0,0.1807,0,1,0.9485,0.0345,0.9485,0.0345,0,1,1,1,0.9761,0.0745,0.9761,0.0745,1,1,1,0.1807,0.9939,0.1249,0.875,0,0.125,0,0.0864,0.0081,0.9136,0.0081,0.9136,0.0081,0.0864,0.0081,0.0515,0.0316,0.9485,0.0316,0.9485,0.0316,0.0515,0.0316,0.0239,0.0682,0.9761,0.0682,0.9761,0.0682,0.0239,0.0682,0.0061,0.1142,0.9939,0.1142,0.9939,0.1142,0.0061,0.1142,0,0.1653,1,0.1653,0.4738,0.6865,0,0.8508,0,1,1,0.6865,0.4738,0.3062,1,0.3062,0,0.1457,0.4738,0.3062,1,0.3062,1,0,0,0,0.4738,0.3062,0,0,0,1,0.4738,0.6865,0.4738,0.3062,1,0.3062,1,0,0,0,0.4738,0.3062,0,0,0,1,0.4738,0.6865,0.067,0.9987,0.0677,1,0,0.6658,0.017,0.8381,0,0.6658,0.0677,1,0.9323,1,0.017,0.4935,0.017,0.4935,0.9323,1,0.1464,0.195,0.067,0.3329,0.1464,0.195,0.9323,1,0.3706,0.0227,0.25,0.0892,0.3706,0.0227,0.9323,1,0.6294,0.0227,0.5,0,0.6294,0.0227,0.9323,1,0.933,0.9987,0.75,0.0892,0.75,0.0892,0.933,0.9987,0.983,0.8381,0.8536,0.195,0.8536,0.195,0.983,0.8381,1,0.6658,0.933,0.3329,0.9941,0.6707,1,0.6041,0.1826,0,0.9487,0.793,0.9487,0.793,0.1826,0,0.7718,0.9634,0.8728,0.8928,0.7718,0.9634,0.1826,0,0.5229,1,0.6525,1,0.5229,1,0.1826,0,0.2687,0.8928,0.3921,0.9634,0.2687,0.8928,0.1826,0,0.0773,0.6707,0.1614,0.793,0.0773,0.6707,0.1826,0,0.1333,0.0344,0.0223,0.5343,0.0223,0.5343,0.1333,0.0344,0.0575,0.1343,0,0.393,0.017,0.9145,0.0414,1,0.9586,1,0,0.7265,0,0.7265,0.9586,1,0.067,0.3632,0.017,0.5385,0.067,0.3632,0.9586,1,0.25,0.0973,0.1464,0.2128,0.25,0.0973,0.9586,1,0.5,0,0.3706,0.0248,0.5,0,0.9586,1,0.75,0.0973,0.6294,0.0248,0.75,0.0973,0.9586,1,0.983,0.9145,0.8536,0.2128,0.8536,0.2128,0.983,0.9145,1,0.7265,0.933,0.3632,0.933,0.3407,0.8536,0.1996,1,0.6814,0.983,0.5051,1,0.6814,0.8536,0.1996,0.75,0.0913,0.983,0.8578,0.983,0.8578,0.75,0.0913,0.6294,0.0232,0.9397,1,0.9397,1,0.6294,0.0232,0.5,0,0.0603,1,0.0603,1,0.5,0,0.3706,0.0232,0.017,0.8578,0.017,0.8578,0.3706,0.0232,0.25,0.0913,0,0.6814,0,0.6814,0.25,0.0913,0.1464,0.1996,0.017,0.5051,0,1,0.9805,1,1,0.3289,0.0243,0.299,1,1,1,0.1788,0,0.1788,0,1,0,0.1788,1,0.1788,0.9939,0.1235,0.0061,0.1235,0.0061,0.1235,0.9939,0.1235,0.9761,0.0737,0.0239,0.0737,0.0239,0.0737,0.9761,0.0737,0.9485,0.0341,0.0515,0.0341,0.0515,0.0341,0.9485,0.0341,0.9136,0.0087,0.0864,0.0087,0.017,0.8134,0.067,0.9693,0.983,0.4789,0.933,0.3231,0.983,0.4789,0.067,0.9693,0.0852,1,1,0.6462,1,0.6462,0.0852,1,0.9148,1,0.983,0.8134,0.983,0.8134,0.9148,1,0.933,0.9693,0.017,0.8134,0.933,0.3231,0.8536,0.1893,0,0.6462,0,0.6462,0.8536,0.1893,0.75,0.0866,0.017,0.4789,0.017,0.4789,0.75,0.0866,0.6294,0.022,0.067,0.3231,0.067,0.3231,0.6294,0.022,0.5,0,0.1464,0.1893,0.017,0.8897,0.0494,1,0.983,0.5238,0.933,0.3534,0.983,0.5238,0.0494,1,0.9506,1,1,0.7068,1,0.7068,0.9506,1,0.983,0.8897,0.017,0.8897,0.933,0.3534,0.8536,0.207,0,0.7068,0,0.7068,0.8536,0.207,0.75,0.0947,0.017,0.5238,0.017,0.5238,0.75,0.0947,0.6294,0.0241,0.067,0.3534,0.067,0.3534,0.6294,0.0241,0.5,0,0.1464,0.207,0.983,0.4723,0.933,0.3186,0.067,0.3186,0.017,0.4723,0.067,0.3186,0.933,0.3186,0.8536,0.1866,0.1464,0.1866,0.1464,0.1866,0.8536,0.1866,0.75,0.0854,0.25,0.0854,0.25,0.0854,0.75,0.0854,0.6294,0.0217,0.3706,0.0217,0.3706,0.0217,0.6294,0.0217,0.5,0,0.983,0.4723,0.017,0.4723,0,0.6372,1,0.6372,1,0.6372,0,0.6372,0.017,0.8021,0.983,0.8021,0.983,0.8021,0.017,0.8021,0.067,0.9558,0.933,0.9558]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture_17.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 1389;
  var numMorphTargets = model.morphTargets.length;
  var scale = 2.15638636719;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 1788;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
