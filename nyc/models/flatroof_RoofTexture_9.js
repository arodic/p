// Converted from: ./flatroof_RoofTexture_9.obj
//  vertices: 512
//  faces: 181
//  normals: 0
//  colors: 0
//  uvs: 710
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[0.017,0.5701,0.1464,0.2253,0.067,0.3846,0.75,0.0957,0.933,0.3571,0.8536,0.2092,0.75,0.0957,0.933,0.3571,0.8536,0.2092,0.75,0.0957,0.933,0.3571,0.8536,0.2092,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0.5,0,0.15,1,0.85,1,1,0.7692,1,1,0.0954,0,0,0.1362,0,1,1,1,0.2622,0,0,0.3744,0,1,0.0931,1,0.393,0,0,0.5614,0,0.867,0.3008,0,0.2479,1,1,1,0.9008,0.6,1,0.00080001,0.0002,0,0,1,0.9999,1,0.9998,0,0,0,0,1,1,1,0.9998,0,0,0,0,1,1,1,0.9998,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,0.0061,0.1305,0,0.1889,0,1,1,1,0.0061,0.1305,0,0.1889,0,1,1,1,1,0,0,0,0,1,0,1,1,1,0.2251,0,0,1,1,1,0.4807,0,0.1509,0,0,1,1,1,0.4807,0,0.1509,0,0,1,1,1,0.4807,0,0.1509,0,0,1,1,1,0.4807,0,0.1509,0,0.0002,1,0.0104,0,0,0,0.125,0,1,1,1,0.1923,0.875,0,0.875,0,0,1,1,1,1,0.1786,0.875,0,0,1,1,1,1,0.1786,0.875,0,0,1,1,1,1,0.1786,0,1,0.875,0,0.125,0,0,0.1786,0,1,1,1,0.6294,0,0.3956,0,0.9973,1,1,1,0.7441,0,1,1,1,0,0,0,0,1,1,0.3585,0,0.3585,0,1,1,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0.0239,0.0787,0.125,0,0.0864,0.0093,0.0515,0.0365,1,0.0456,0,0.0456,0,0.9523,1,0.9523,1,1,1,0.9523,0,0.9523,0,1,1,0.0456,1,0,0,0,0,0.0456,0,1,0.9859,1,1,0.1063,0.0196,0,0,1,0.9851,1,1,0,0.0185,0,0,1,0.9851,1,1,0,0.0185,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0.5094,0.6938,0,0.2676,0,0.8325,1,0.5,0,0,0.749,0.1675,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0.011,0,0.8536,0.4125,0.7592,0.0269,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0.0239,0.0793,0.125,0,0.0864,0.0094,0.0515,0.0367,1,0.1786,0,0.1786,0,1,1,1,1,0.1786,0,0.1786,0,1,1,1,1,0.1786,0,0.1786,0,1,1,1,0.0864,0.0087,0.9136,0.0087,0.875,0,0.125,0,0.0001,0.0011,0,1,1,1,0.9989,0,0.9988,0,0,0,0.0002,1,1,1,0.9988,0,0,0,0.0002,1,1,1,0.9988,0,0,0,0.0002,1,1,1,0.9988,0,0,0,0.0002,1,1,1,0.7861,1,0.4778,0,0,0.7339,0.207,1,0.4778,0,0.1687,1,0.8181,1,1,0.7061,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0.1855,0.0515,0.0354,0.0239,0.0765,0.0061,0.1282,0,0.1855,0.0515,0.0354,0.0239,0.0765,0.0061,0.1282,1,1,1,0,0,0,0,1,0.0018,0,0,1,0.9984,1,1,0.0011,0.001,0,0,1,0.999,1,1,0.0012,0.001,0,0,1,0.999,1,1,0.0012,0.0015,0,0,1,1,1,0.9998,0.0018,0.0023,1,1,1,0.9962,0,0,0,0.0023,1,1,1,0.9962,0,0,0,1,1,1,0.1855,0.9939,0.1282,0.9761,0.0765,1,1,0.9761,0.0765,0.9485,0.0354,0.9136,0.0091,1,1,0.9136,0.0091,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0091,0,1,0,1,0.0864,0.0091,0.0515,0.0354,0,0.1855,1,1,1,0.1855,0.9939,0.1282,0.9761,0.0765,1,1,0.9761,0.0765,0.9485,0.0354,0.9136,0.0091,1,1,0.9136,0.0091,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0091,0,1,0,1,0.0864,0.0091,0.0515,0.0354,0,0.1855,0,0.7718,0.1687,1,0.4778,0,1,0.6714,0.4778,0,0.7861,1,0,1,1,1,1,0.1786,0,0.1786,0,0.1786,1,0.1786,0.9939,0.1234,0.0061,0.1234,0.0061,0.1234,0.9939,0.1234,0.9761,0.0736,0.0239,0.0736,0.0239,0.0736,0.9761,0.0736,0.9485,0.0341,0.0515,0.0341,0.0515,0.0341,0.9485,0.0341,0.9136,0.0087,0.0864,0.0087,0.875,0,0.125,0,0.0864,0.0087,0.9136,0.0087,0.9136,0.0087,0.0864,0.0087,0.0515,0.0341,0.9485,0.0341,0.9485,0.0341,0.0515,0.0341,0.0239,0.0736,0.9761,0.0736,0.9761,0.0736,0.0239,0.0736,0.0061,0.1234,0.9939,0.1234,0.9939,0.1234,0.0061,0.1234,0,0.1786,1,0.1786,0.875,0,0.125,0,0.0864,0.0087,0.9136,0.0087,0.9136,0.0087,0.0864,0.0087,0.0515,0.0341,0.9485,0.0341,0.9485,0.0341,0.0515,0.0341,0.0239,0.0736,0.9761,0.0736,0.9761,0.0736,0.0239,0.0736,0.0061,0.1234,0.9939,0.1234,0.9939,0.1234,0.0061,0.1234,0,0.1786,1,0.1786,0.875,0,0.125,0,0.0864,0.0087,0.9136,0.0087,0.9136,0.0087,0.0864,0.0087,0.0515,0.0341,0.9485,0.0341,0.9485,0.0341,0.0515,0.0341,0.0239,0.0736,0.9761,0.0736,0.9761,0.0736,0.0239,0.0736,0.0061,0.1234,0.9939,0.1234,0.9939,0.1234,0.0061,0.1234,0,0.1786,1,0.1786,0.875,0,0.125,0,0.0239,0.0793,0.0061,0.1329,0.875,0,0.0061,0.1329,0,0.1923,0.9136,0.0094,0.9136,0.0094,0,0.1923,0,1,0.9485,0.0367,0.9485,0.0367,0,1,1,1,0.9761,0.0793,0.9761,0.0793,1,1,1,0.1923,0.9939,0.1329,1,1,0.8536,0.4125,0.011,0,0,1,1,0.749,0.5,0,0.8325,1,0.8687,1,1,0.5094,0,1,1,1,1,0.1909,0.9939,0.1319,0.9761,0.0787,1,1,0.9761,0.0787,0.9485,0.0365,0,1,0,1,0.9485,0.0365,0.9136,0.0093,0,0.1909,0,0.1909,0.9136,0.0093,0.875,0,0.0061,0.1319,0.0061,0.1319,0.875,0,0.125,0,0.0239,0.0787,1,0.3585,0.7479,0,0.2521,0,0,0.3585,0,1,0.9973,1,0.3956,0,0.0681,0.7535,1,0.1786,0.875,0,0,1,1,1,0.875,0,0.125,0,0,0.1786,0,1,0.875,0,0.125,0,0,0.1786,0,1,0.875,0,0.125,0,0,0.1786,0,1,0,1,1,1,0.125,0,0,0.1923,0.0002,1,0.995,1,1,0.00059998,0.0104,0,1,1,1,0.1889,0.9485,0.0361,0.9136,0.0092,0.9485,0.0361,1,0.1889,0.9939,0.1305,0.9761,0.0779,1,1,0.9136,0.0092,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0092,0.0515,0.0361,1,1,0.0515,0.0361,0.0239,0.0779,0.0061,0.1305,1,1,1,0.1889,0.9485,0.0361,0.9136,0.0092,0.9485,0.0361,1,0.1889,0.9939,0.1305,0.9761,0.0779,1,1,0.9136,0.0092,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0092,0.0515,0.0361,1,1,0.0515,0.0361,0.0239,0.0779,0.0061,0.1305,0,0,0.2479,1,0.3008,0,0.607,0,0.393,0,0.0931,1,0.9069,1,0.607,0,0.9069,1,1,0.867,1,0.5614,0.7378,0,0.2622,0,1,1,1,0.3744,0.9046,0,0.0954,0,1,1,1,0.1362,0,0.7692,0.15,1,0.5,0,0.017,0.8992,0.0463,1,0.9537,1,0,0.7143,0,0.7143,0.9537,1,0.067,0.3571,0.017,0.5294,0.067,0.3571,0.9537,1,0.25,0.0957,0.1464,0.2092,0.25,0.0957,0.9537,1,0.983,0.8992,0.3706,0.0243,0.3706,0.0243,0.983,0.8992,1,0.7143,0.5,0,0.5,0,1,0.7143,0.983,0.5294,0.6294,0.0243,0.6294,0.0243,0.983,0.5294,0.933,0.3571,0.75,0.0957,0.017,0.8992,0.0463,1,0.9537,1,0,0.7143,0,0.7143,0.9537,1,0.067,0.3571,0.017,0.5294,0.067,0.3571,0.9537,1,0.25,0.0957,0.1464,0.2092,0.25,0.0957,0.9537,1,0.983,0.8992,0.3706,0.0243,0.3706,0.0243,0.983,0.8992,1,0.7143,0.5,0,0.5,0,1,0.7143,0.983,0.5294,0.6294,0.0243,0.6294,0.0243,0.983,0.5294,0.933,0.3571,0.75,0.0957,0.017,0.8992,0.0463,1,0.9537,1,0,0.7143,0,0.7143,0.9537,1,0.067,0.3571,0.017,0.5294,0.067,0.3571,0.9537,1,0.25,0.0957,0.1464,0.2092,0.25,0.0957,0.9537,1,0.983,0.8992,0.3706,0.0243,0.3706,0.0243,0.983,0.8992,1,0.7143,0.5,0,0.5,0,1,0.7143,0.983,0.5294,0.6294,0.0243,0.6294,0.0243,0.983,0.5294,0.933,0.3571,0.75,0.0957,0.983,0.5701,0.933,0.3846,0.8536,0.2253,0.75,0.1031,0.983,0.5701,0.75,0.1031,0.6294,0.0262,1,0.7692,1,0.7692,0.6294,0.0262,0.5,0,0.983,0.9683,0.983,0.9683,0.5,0,0.3706,0.0262,0.9744,1,0.9744,1,0.3706,0.0262,0.017,0.9683,0.0256,1,0.017,0.9683,0.3706,0.0262,0.25,0.1031,0,0.7692,0,0.7692,0.25,0.1031,0.1464,0.2253,0.017,0.5701]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture_9.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 1536;
  var numMorphTargets = model.morphTargets.length;
  var scale = 2.09791087891;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 1782;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
