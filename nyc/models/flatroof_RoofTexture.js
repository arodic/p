// Converted from: ./flatroof_RoofTexture.obj
//  vertices: 582
//  faces: 210
//  normals: 0
//  colors: 0
//  uvs: 818
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[0,1,0.8963,1,1,0.5148,0.2092,0,0,1,1,0.062,0.9207,0,0.1742,0,0,1,1,0.062,0.9207,0,0.1742,0,0,1,1,0.062,0.9207,0,0.1742,0,0.0127,0.0031,0,1,1,1,0.7557,0,0.962,1,1,0.0041,0.0382,0,0,1,0.9632,1,1,0.0041,0.0369,0,0,1,1,1,0.9986,0,0,0.002,0.0011,1,0,1,1,1,0.9995,0,0.0014,0,0,1,1,1,0.9995,0,0.0014,0,0,1,1,1,0.9995,0,0.0014,0,0.7644,0,0,0.6946,0.0721,1,1,1,0,1,1,0.2235,0.7585,0,0.1701,0,0.9997,0,0.0008,0.0028,0,1,1,1,1,0,0.0025,0,0,1,0.9985,1,1,0,0.0025,0,0,1,0.9985,1,1,0,0.0025,0,0,1,0.9985,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0.8379,0,0.5727,0,0.8943,0,0,1,1,1,1,0.1571,0.7429,0,0,1,1,1,1,0.3823,0.6695,0,0.9969,1,1,0.9954,1,0.4914,0.5824,0,0.9099,1,1,0.866,1,0.6209,0,0.901,0.6412,0,0.4471,0,0.3172,0.099,0.425,0,1,1,0.7388,0,0.0002,1,1,1,0.9992,0.0089,0,0,0.0002,1,1,1,0.9992,0,0,0,0.0002,1,1,1,0.9992,0,0,0,0.0002,1,1,1,0.9992,0,0,0,0,1,0.9983,1,1,0.0098,0.0018,0,0,1,0.9984,1,1,0,0.0018,0,0,1,0.9984,1,1,0,0.0018,0,1,1,1,0,0,0,0,1,1,1,0.0061,0.1322,0,0.1914,0,1,1,1,0.0061,0.1322,0,0.1914,0,1,1,1,1,0,0,0,0,1,0.6702,0.965,0.3515,1,0.5068,1,0.933,0.37,1,0.74,0.983,0.5484,0.933,0.37,1,0.74,0.983,0.5484,0.933,0.37,1,0.74,0.983,0.5484,0.933,0.37,1,0.74,0.983,0.5484,0,1,1,1,0.9996,0,0.004,0.0011,0,1,1,1,1,0,0,0,1,1,0.2521,0,0,0,0,1,1,1,0.2521,0,0,0,0,1,1,1,1,0,0,0,0,1,0.0217,1,1,1,0.9726,0,0,0.1803,0.0266,1,1,1,0.9724,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0.1063,1,0.9612,0.5437,0.3788,0,0,0.535,0.1633,1,0.7697,0,0.1065,0,0,0.174,0.0256,1,0.017,0.5701,0,0.7692,0.017,0.9683,0.0507,0.5959,0.0254,0.0878,0,0.2552,0.0086,0.4285,0.933,0.3571,0.983,0.8992,1,0.7143,0.983,0.5294,0.933,0.3571,0.983,0.8992,1,0.7143,0.983,0.5294,0.933,0.3571,0.983,0.8992,1,0.7143,0.983,0.5294,0.933,0.3571,0.983,0.8992,1,0.7143,0.983,0.5294,0.933,0.3571,0.983,0.8992,1,0.7143,0.983,0.5294,0.8979,1,0.0579,0.4327,0,1,0.8053,0,0,1,1,1,1,0.289,0.1734,1,0.5,0,0,0.7425,1,1,1,0,0,0,0,1,1,1,0.2521,0,0,0,0,1,1,1,0.2521,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,0,0.5418,0.0044,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0.0228,0.055,0,0.5418,1,1,0.9904,0,1,0,0.7479,0,0.2521,0,1,1,1,0,0.7479,0,0.2521,0,1,1,1,0.7425,0.5,0,0.1734,1,0.8266,1,0.8053,0,0.1947,0,0,0.289,0,1,1,0,0.4906,0,0.0579,0.4327,0.8979,1,0.017,0.8992,0.0463,1,0.75,0.0957,0.6294,0.0243,0.017,0.8992,0.6294,0.0243,0.5,0,0,0.7143,0,0.7143,0.5,0,0.3706,0.0243,0.017,0.5294,0.017,0.5294,0.3706,0.0243,0.25,0.0957,0.067,0.3571,0.067,0.3571,0.25,0.0957,0.1464,0.2092,0.75,0.0957,0.0463,1,0.9537,1,0.8536,0.2092,0.8536,0.2092,0.9537,1,0.983,0.8992,0.933,0.3571,0.017,0.8992,0.0463,1,0.75,0.0957,0.6294,0.0243,0.017,0.8992,0.6294,0.0243,0.5,0,0,0.7143,0,0.7143,0.5,0,0.3706,0.0243,0.017,0.5294,0.017,0.5294,0.3706,0.0243,0.25,0.0957,0.067,0.3571,0.067,0.3571,0.25,0.0957,0.1464,0.2092,0.75,0.0957,0.0463,1,0.9537,1,0.8536,0.2092,0.8536,0.2092,0.9537,1,0.983,0.8992,0.933,0.3571,0.017,0.8992,0.0463,1,0.75,0.0957,0.6294,0.0243,0.017,0.8992,0.6294,0.0243,0.5,0,0,0.7143,0,0.7143,0.5,0,0.3706,0.0243,0.017,0.5294,0.017,0.5294,0.3706,0.0243,0.25,0.0957,0.067,0.3571,0.067,0.3571,0.25,0.0957,0.1464,0.2092,0.75,0.0957,0.0463,1,0.9537,1,0.8536,0.2092,0.8536,0.2092,0.9537,1,0.983,0.8992,0.933,0.3571,0.017,0.8992,0.0463,1,0.75,0.0957,0.6294,0.0243,0.017,0.8992,0.6294,0.0243,0.5,0,0,0.7143,0,0.7143,0.5,0,0.3706,0.0243,0.017,0.5294,0.017,0.5294,0.3706,0.0243,0.25,0.0957,0.067,0.3571,0.067,0.3571,0.25,0.0957,0.1464,0.2092,0.75,0.0957,0.0463,1,0.9537,1,0.8536,0.2092,0.8536,0.2092,0.9537,1,0.983,0.8992,0.933,0.3571,0.017,0.8992,0.0463,1,0.75,0.0957,0.6294,0.0243,0.017,0.8992,0.6294,0.0243,0.5,0,0,0.7143,0,0.7143,0.5,0,0.3706,0.0243,0.017,0.5294,0.017,0.5294,0.3706,0.0243,0.25,0.0957,0.067,0.3571,0.067,0.3571,0.25,0.0957,0.1464,0.2092,0.75,0.0957,0.0463,1,0.9537,1,0.8536,0.2092,0.8536,0.2092,0.9537,1,0.983,0.8992,0.933,0.3571,0.9914,0.2552,0.9667,0.1572,0.2219,0.8685,0.3392,0.9552,0.9914,0.2552,0.3392,0.9552,0.4675,1,1,0.4285,1,0.4285,0.4675,1,0.598,1,0.9746,0.5959,0.9746,0.5959,0.598,1,0.7219,0.9551,0.9168,0.746,0.9168,0.746,0.7219,0.9551,0.8306,0.8685,0.2219,0.8685,0.9667,0.1572,0.0593,0,0.1235,0.746,0.1235,0.746,0.0593,0,0.0254,0.0878,0.0507,0.5959,0.983,0.5701,0.933,0.3846,0.9744,1,0.983,0.9683,0.983,0.5701,0.983,0.9683,1,0.7692,0.9744,1,0.933,0.3846,0.8536,0.2253,0.75,0.1031,0.9744,1,0.75,0.1031,0.6294,0.0262,0.5,0,0.9744,1,0.5,0,0.3706,0.0262,0.25,0.1031,0.9744,1,0.25,0.1031,0.1464,0.2253,0.067,0.3846,0.9744,1,0.067,0.3846,0.017,0.5701,0.0256,1,0.1633,1,1,1,0.94,0.1839,0.7697,0,0.1063,1,1,1,0.9612,0.5437,1,0,0.7479,0,0.2521,0,1,1,1,0,0.7479,0,0.2521,0,1,1,0.017,0.9315,0.0362,1,0.9638,1,0,0.74,0,0.74,0.9638,1,0.067,0.37,0.017,0.5484,0.067,0.37,0.9638,1,0.25,0.0991,0.1464,0.2167,0.25,0.0991,0.9638,1,0.5,0,0.3706,0.0252,0.5,0,0.9638,1,0.75,0.0991,0.6294,0.0252,0.75,0.0991,0.9638,1,0.983,0.9315,0.8536,0.2167,0.8536,0.2167,0.983,0.9315,1,0.74,0.933,0.37,0.017,0.9315,0.0362,1,0.9638,1,0,0.74,0,0.74,0.9638,1,0.067,0.37,0.017,0.5484,0.067,0.37,0.9638,1,0.25,0.0991,0.1464,0.2167,0.25,0.0991,0.9638,1,0.5,0,0.3706,0.0252,0.5,0,0.9638,1,0.75,0.0991,0.6294,0.0252,0.75,0.0991,0.9638,1,0.983,0.9315,0.8536,0.2167,0.8536,0.2167,0.983,0.9315,1,0.74,0.933,0.37,0.017,0.9315,0.0362,1,0.9638,1,0,0.74,0,0.74,0.9638,1,0.067,0.37,0.017,0.5484,0.067,0.37,0.9638,1,0.25,0.0991,0.1464,0.2167,0.25,0.0991,0.9638,1,0.5,0,0.3706,0.0252,0.5,0,0.9638,1,0.75,0.0991,0.6294,0.0252,0.75,0.0991,0.9638,1,0.983,0.9315,0.8536,0.2167,0.8536,0.2167,0.983,0.9315,1,0.74,0.933,0.37,0.017,0.9315,0.0362,1,0.9638,1,0,0.74,0,0.74,0.9638,1,0.067,0.37,0.017,0.5484,0.067,0.37,0.9638,1,0.25,0.0991,0.1464,0.2167,0.25,0.0991,0.9638,1,0.5,0,0.3706,0.0252,0.5,0,0.9638,1,0.75,0.0991,0.6294,0.0252,0.75,0.0991,0.9638,1,0.983,0.9315,0.8536,0.2167,0.8536,0.2167,0.983,0.9315,1,0.74,0.933,0.37,0.2739,0.1701,0.1515,0.2873,0.0614,0.4181,0.0097,0.5535,0.2739,0.1701,0.0097,0.5535,0,0.6843,0.4202,0.0743,0.4202,0.0743,0,0.6843,0.0329,0.8015,0.5806,0.0066,0.5806,0.0066,0.0329,0.8015,0.1062,0.8973,0.6115,0,0.6115,0,0.1062,0.8973,0.9769,0.8015,1,0.7794,0.9769,0.8015,0.1062,0.8973,0.2148,0.965,0.8305,0.8973,0.8305,0.8973,0.2148,0.965,0.3515,1,0.6702,0.965,1,1,1,0.1914,0.9485,0.0365,0.9136,0.0094,0.9485,0.0365,1,0.1914,0.9939,0.1322,0.9761,0.0789,1,1,0.9136,0.0094,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0094,0.0515,0.0365,1,1,0.0515,0.0365,0.0239,0.0789,0.0061,0.1322,1,1,1,0.1914,0.9485,0.0365,0.9136,0.0094,0.9485,0.0365,1,0.1914,0.9939,0.1322,0.9761,0.0789,1,1,0.9136,0.0094,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0094,0.0515,0.0365,1,1,0.0515,0.0365,0.0239,0.0789,0.0061,0.1322,0.0901,1,1,1,0.425,0,0,0.6551,0,0.901,0.0515,1,1,0.6892,0.6412,0,1,0.6892,0.0515,1,0.7863,1,0.9162,0.901,0.5824,0,0.4176,0,0.0901,1,0.9099,1,0.0901,1,0.4176,0,0,0.6209,0,0.866,0.6695,0,0.3305,0,0.0031,1,0.9969,1,0.0031,1,0.3305,0,0,0.4914,0,0.9954,0.7429,0,0.2571,0,0,0.3823,0,1,0.8943,0,0.1057,0,0,0.1571,0,1,0.8132,1,1,0.6738,0.8379,0,0,1,0,1,0.8682,1,1,0.2235,0,1,0.833,1,1,0.062,0,1,0.833,1,1,0.062,0,1,0.833,1,1,0.062]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 1746;
  var numMorphTargets = model.morphTargets.length;
  var scale = 1.92974567383;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 2056;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
