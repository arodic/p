// Converted from: ./flatroof_RoofTexture_28.obj
//  vertices: 447
//  faces: 178
//  normals: 0
//  colors: 0
//  uvs: 691
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[0.0022,1,1,1,0.3257,0.3234,0,0,0.0015,1,0.9548,0.9393,0.3021,0,0,0,1,0.0108,0.1009,0,0,1,0.9984,1,0.9999,0,0.0922,0,0,1,1,1,0.9999,0,0.0922,0,0,1,1,1,0.9926,0,0,0.017,0.0072,1,1,1,0.9998,0,0,0,0.0002,1,1,1,0.9998,0,0,0,0.0002,1,1,1,0.9998,0,0,0,0.0002,1,1,1,0.9998,0,0,0,0.0002,1,1,1,0.017,0.4561,0.1464,0.1802,0.067,0.3077,0.933,0.3604,1,0.7208,0.983,0.5343,0.933,0.3604,1,0.7208,0.983,0.5343,0.067,0.9892,0.017,0.4888,0,0.6595,0.017,0.8301,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0.0676,1,0.3536,0,0,0,1,0.3864,0.2548,0,0,1,0.8466,1,1,1,0.8687,0,0,0.214,0.0997,1,0.8735,1,1,0.2826,0.1763,0,0,1,0.8336,1,1,0.457,0.3098,0,0,1,0.1759,1,0.5222,0,0,0.713,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0.9981,0,0,0.0062,0.0013,1,1,1,0.9992,0,0,0,0.0002,1,1,1,0.9992,0,0,0,0.0002,1,1,1,0.9992,0,0,0,0.0002,1,1,1,1,1,0.9817,0.00029999,0.0255,0,0,1,1,0.0415,0,1,0.9679,1,1,0.0415,0,1,0.9679,1,1,0.0415,0,1,0.9679,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0.0061,0.1302,0,0.1884,0,1,1,1,1,0,0,0,0,1,0.017,0.4899,0.1464,0.1936,0.067,0.3305,0.0033,0.3282,0.0308,0.0418,0,0.1772,0.983,0.549,0.983,0.9324,1,0.7407,0.983,0.549,0.983,0.9324,1,0.7407,0.983,0.549,0.983,0.9324,1,0.7407,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,1,0.017,0.5186,0.1464,0.2049,0.067,0.3498,0.75,0.0932,0.933,0.3477,0.8536,0.2037,0.9218,0.693,0.6871,0.9001,0.8209,0.807,0.8536,0.1938,0.983,0.4904,0.933,0.3308,0.0659,0.5531,0.2666,0.2867,0.1521,0.4176,0.8536,0.1863,0.983,0.4714,0.933,0.318,0.017,0.8006,0.067,0.954,0.0948,1,0.9052,1,0.017,0.8006,0.9052,1,0.017,0.4714,0,0.636,0.017,0.4714,0.9052,1,0.1464,0.1863,0.067,0.318,0.1464,0.1863,0.9052,1,0.3706,0.0217,0.25,0.0852,0.3706,0.0217,0.9052,1,0.933,0.954,0.5,0,0.5,0,0.933,0.954,0.983,0.8006,0.6294,0.0217,0.6294,0.0217,0.983,0.8006,1,0.636,0.75,0.0852,0.75,0.0852,1,0.636,0.983,0.4714,0.8536,0.1863,0.8714,0.684,0.986,0.5531,1,0.531,0.719,0,0.8714,0.684,0.719,0,0.5897,0.8972,0.7362,0.8013,0.5897,0.8972,0.719,0,0.3024,1,0.4417,0.9649,0.3024,1,0.719,0,0.0866,0.9649,0.1813,1,0.0866,0.9649,0.719,0,0.6964,0.0057,0.0247,0.8972,0.0247,0.8972,0.6964,0.0057,0.5484,0.0735,0,0.8013,0,0.8013,0.5484,0.0735,0.4018,0.1693,0.014,0.684,0.014,0.684,0.4018,0.1693,0.2666,0.2867,0.0659,0.5531,0.017,0.8329,0.067,0.9925,0.0713,1,0.9287,1,0.017,0.8329,0.9287,1,0.017,0.4904,0,0.6617,0.017,0.4904,0.9287,1,0.1464,0.1938,0.067,0.3308,0.1464,0.1938,0.9287,1,0.3706,0.0225,0.25,0.0886,0.3706,0.0225,0.9287,1,0.933,0.9925,0.5,0,0.5,0,0.933,0.9925,0.983,0.8329,0.6294,0.0225,0.6294,0.0225,0.983,0.8329,1,0.6617,0.75,0.0886,0.75,0.0886,1,0.6617,0.983,0.4904,0.8536,0.1938,0.1458,0.0341,0,0.095,0.0369,0.9685,0.3165,0,0.3165,0,0.0369,0.9685,0.6505,0.0341,0.4887,0,0.6505,0.0341,0.0369,0.9685,0.9007,0.193,0.7911,0.0999,0.9007,0.193,0.0369,0.9685,0.1866,1,0.972,0.307,0.972,0.307,0.1866,1,0.3588,1,1,0.4342,1,0.4342,0.3588,1,0.5295,0.9659,0.9829,0.5658,0.9829,0.5658,0.5295,0.9659,0.6871,0.9001,0.9218,0.693,0.017,0.8755,0.0541,1,0.9459,1,0,0.6955,0,0.6955,0.9459,1,0.067,0.3477,0.017,0.5155,0.067,0.3477,0.9459,1,0.25,0.0932,0.1464,0.2037,0.25,0.0932,0.9459,1,0.983,0.8755,0.3706,0.0237,0.3706,0.0237,0.983,0.8755,1,0.6955,0.5,0,0.5,0,1,0.6955,0.983,0.5155,0.6294,0.0237,0.6294,0.0237,0.983,0.5155,0.933,0.3477,0.75,0.0932,0.983,0.5186,0.933,0.3498,0.8536,0.2049,0.75,0.0937,0.983,0.5186,0.75,0.0937,0.6294,0.0238,1,0.6996,1,0.6996,0.6294,0.0238,0.5,0,0.983,0.8807,0.983,0.8807,0.5,0,0.3706,0.0238,0.9477,1,0.9477,1,0.3706,0.0238,0.017,0.8807,0.0523,1,0.017,0.8807,0.3706,0.0238,0.25,0.0937,0,0.6996,0,0.6996,0.25,0.0937,0.1464,0.2049,0.017,0.5186,0.017,0.9324,0.0359,1,0.017,0.549,0,0.7407,0.017,0.549,0.0359,1,0.9641,1,0.067,0.3703,0.067,0.3703,0.9641,1,0.25,0.0992,0.1464,0.2169,0.25,0.0992,0.9641,1,0.5,0,0.3706,0.0252,0.5,0,0.9641,1,0.75,0.0992,0.6294,0.0252,0.75,0.0992,0.9641,1,0.933,0.3703,0.8536,0.2169,0.933,0.3703,0.9641,1,0.983,0.9324,0.983,0.549,0.017,0.9324,0.0359,1,0.017,0.549,0,0.7407,0.017,0.549,0.0359,1,0.9641,1,0.067,0.3703,0.067,0.3703,0.9641,1,0.25,0.0992,0.1464,0.2169,0.25,0.0992,0.9641,1,0.5,0,0.3706,0.0252,0.5,0,0.9641,1,0.75,0.0992,0.6294,0.0252,0.75,0.0992,0.9641,1,0.933,0.3703,0.8536,0.2169,0.933,0.3703,0.9641,1,0.983,0.9324,0.983,0.549,0.017,0.9324,0.0359,1,0.017,0.549,0,0.7407,0.017,0.549,0.0359,1,0.9641,1,0.067,0.3703,0.067,0.3703,0.9641,1,0.25,0.0992,0.1464,0.2169,0.25,0.0992,0.9641,1,0.5,0,0.3706,0.0252,0.5,0,0.9641,1,0.75,0.0992,0.6294,0.0252,0.75,0.0992,0.9641,1,0.933,0.3703,0.8536,0.2169,0.933,0.3703,0.9641,1,0.983,0.9324,0.983,0.549,0.9967,0.4845,0.9826,0.4253,0.9692,0.7709,1,0.6355,0.9692,0.7709,0.9826,0.4253,0.0545,0,0.9065,0.8814,0.9065,0.8814,0.0545,0,0.7041,1,0.8161,0.9595,0.7041,1,0.0545,0,0.447,0.9595,0.5782,1,0.447,0.9595,0.0545,0,0.2041,0.7709,0.3194,0.8814,0.2041,0.7709,0.0545,0,0.0405,0.4845,0.109,0.6355,0.0405,0.4845,0.0545,0,0.0308,0.0418,0.0033,0.3282,0.983,0.4899,0.933,0.3305,0.983,0.832,1,0.6609,0.983,0.832,0.933,0.3305,0.8536,0.1936,0.933,0.9914,0.933,0.9914,0.8536,0.1936,0.75,0.0885,0.928,1,0.928,1,0.75,0.0885,0.6294,0.0225,0.072,1,0.072,1,0.6294,0.0225,0.5,0,0.067,0.9914,0.067,0.9914,0.5,0,0.3706,0.0225,0.017,0.832,0.017,0.832,0.3706,0.0225,0.25,0.0885,0,0.6609,0,0.6609,0.25,0.0885,0.1464,0.1936,0.017,0.4899,1,1,1,0.1884,0.9485,0.036,0.9136,0.0092,0.9485,0.036,1,0.1884,0.9939,0.1302,0.9761,0.0777,1,1,0.9136,0.0092,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0092,0.0515,0.036,1,1,0.0515,0.036,0.0239,0.0777,0.0061,0.1302,0.7076,0,0.0337,0,0,1,1,0.0415,0.7076,0,0.0337,0,0,1,1,0.0415,0.7076,0,0.0337,0,0,1,1,0.0415,1,0.7794,0.5222,0,0.1759,1,0.8384,1,1,1,0.9708,0.5679,0.3536,0,0.0676,1,0.067,0.9892,0.0733,1,0.067,0.3297,0.017,0.4888,0.067,0.3297,0.0733,1,0.9267,1,0.1464,0.1932,0.1464,0.1932,0.9267,1,0.3706,0.0225,0.25,0.0884,0.3706,0.0225,0.9267,1,0.6294,0.0225,0.5,0,0.6294,0.0225,0.9267,1,0.8536,0.1932,0.75,0.0884,0.8536,0.1932,0.9267,1,0.933,0.9892,0.933,0.3297,0.933,0.3297,0.933,0.9892,0.983,0.8301,0.983,0.4888,0.983,0.4888,0.983,0.8301,1,0.6595,0.017,0.9074,0.0436,1,0.017,0.5343,0,0.7208,0.017,0.5343,0.0436,1,0.9564,1,0.067,0.3604,0.067,0.3604,0.9564,1,0.25,0.0966,0.1464,0.2111,0.25,0.0966,0.9564,1,0.5,0,0.3706,0.0246,0.5,0,0.9564,1,0.75,0.0966,0.6294,0.0246,0.75,0.0966,0.9564,1,0.983,0.9074,0.8536,0.2111,0.8536,0.2111,0.983,0.9074,1,0.7208,0.933,0.3604,0.017,0.9074,0.0436,1,0.017,0.5343,0,0.7208,0.017,0.5343,0.0436,1,0.9564,1,0.067,0.3604,0.067,0.3604,0.9564,1,0.25,0.0966,0.1464,0.2111,0.25,0.0966,0.9564,1,0.5,0,0.3706,0.0246,0.5,0,0.9564,1,0.75,0.0966,0.6294,0.0246,0.75,0.0966,0.9564,1,0.983,0.9074,0.8536,0.2111,0.8536,0.2111,0.983,0.9074,1,0.7208,0.933,0.3604,0.933,0.3077,0.8536,0.1802,1,0.6154,0.983,0.4561,1,0.6154,0.8536,0.1802,0.75,0.0824,0.983,0.7747,0.983,0.7747,0.75,0.0824,0.6294,0.021,0.933,0.9231,0.933,0.9231,0.6294,0.021,0.5,0,0.8851,1,0.8851,1,0.5,0,0.067,0.9231,0.1149,1,0.067,0.9231,0.5,0,0.3706,0.021,0.017,0.7747,0.017,0.7747,0.3706,0.021,0.25,0.0824,0,0.6154,0,0.6154,0.25,0.0824,0.1464,0.1802,0.017,0.4561,0.0015,1,1,1,0.9548,0.9393]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture_28.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 1341;
  var numMorphTargets = model.morphTargets.length;
  var scale = 1.68554019922;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 1738;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
