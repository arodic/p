// Converted from: ./flatroof_RoofTexture_23.obj
//  vertices: 306
//  faces: 108
//  normals: 0
//  colors: 0
//  uvs: 418
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[0,1,0.5557,0.0361,0.002,0,0,1,1,1,0.9765,0,0.0019,0,0,1,1,1,0.9765,0,0.0019,0,0,1,1,1,0.9765,0,0.0019,0,1,1,1,0,0,0,0,1,1,0,0,0.7479,0.3534,1,1,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0.1432,0,0.6985,1,0.0066,0.9557,0,0.9634,0.052,1,1,0.6969,0.052,1,0.6985,1,0.6985,1,0.0066,0.9557,0,0.9634,0.052,1,0.6985,1,0.0066,0.9557,0,0.9634,0.052,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,0.0434,0.3791,0.1152,0.956,0.9567,0.594,0.8848,0.0171,0.9281,0,0.8848,0.0171,0.9567,0.594,1,0.5769,0.0434,0.3791,0,0.3993,0.0719,0.9762,0.1152,0.956,1,0.5769,0.9567,0.594,0.962,0.638,0.9904,0.6121,0.1205,1,0.1152,0.956,0.0719,0.9762,0.0888,1,1,0.0452,0,0.0452,0,0.9518,1,0.9518,1,1,1,0.9518,0,0.9518,0,1,1,0.0452,1,0,0,0,0,0.0452,0,1,0.9146,1,1,0.5836,0.2037,0,0,1,1,0.1297,0.852,0,0.1704,0,0,1,1,0.1297,0.852,0,0.1704,0,0,1,1,0.1297,0.852,0,0.1704,0,0.9951,0,0,0.0069,0.0012,1,1,1,0.9991,0,0.0027,0,0,1,1,1,0.9991,0,0.0027,0,0,1,1,1,0.9991,0,0.0027,0,0,1,1,1,0.9991,0,0.0027,0,0,1,1,1,0.9991,0,0.0027,0,0,1,1,1,0.9991,0,0.0027,0,0,1,1,1,0.9991,0,0.0027,0,0,1,1,1,0.8614,1,0.5605,0,0.0707,0.4898,0,1,0.8146,1,0.5,0,0,0.7294,0.1854,1,0.8598,1,0.017,0.7445,0.067,0.8872,0.1402,1,0.75,0.0969,0.983,0.5362,0.933,0.3617,0.8536,0.2119,0.75,0.0879,0.983,0.4865,0.933,0.3282,0.8536,0.1922,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0.9913,0.9136,0.8766,0.9939,0.9264,0.9761,0.9659,0.9485,0.9913,0.9136,0.8766,0.9939,0.9264,0.9761,0.9659,0.9485,0,1,1,1,1,0,0,0,0.0403,0,0.0403,0.94,0.9597,0.94,0.9597,0,1,1,0.9597,0.94,0.0403,0.94,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0.9597,0.9451,0.9597,0,0.0403,0,0.0403,0.9451,0.0403,0.9451,0,1,1,1,0.9597,0.9451,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,0.8214,1,1,0.875,1,0.125,0,1,1,0.125,0.9913,0.0864,0,0,0,0,0.9913,0.0864,0.9659,0.0515,0.8214,0,0.8214,0,0.9659,0.0515,0.9264,0.0239,0.8766,0.0061,1,0.875,0.8214,1,0.8766,0.9939,0.9913,0.9136,0,1,0.8214,1,1,0.875,1,0.125,0,1,1,0.125,0.9913,0.0864,0,0,0,0,0.9913,0.0864,0.9659,0.0515,0.8214,0,0.8214,0,0.9659,0.0515,0.9264,0.0239,0.8766,0.0061,1,0.875,0.8214,1,0.8766,0.9939,0.9913,0.9136,0.017,0.8262,0.067,0.9845,0.067,0.3282,0.017,0.4865,0.017,0.8262,0.017,0.4865,0,0.6564,0.067,0.3282,0.067,0.9845,0.076,1,0.1464,0.1922,0.1464,0.1922,0.076,1,0.924,1,0.25,0.0879,0.25,0.0879,0.924,1,0.933,0.9845,0.3706,0.0224,0.3706,0.0224,0.933,0.9845,0.983,0.8262,0.5,0,0.5,0,0.983,0.8262,1,0.6564,0.6294,0.0224,0.6294,0.0224,1,0.6564,0.983,0.4865,0.75,0.0879,0.017,0.9107,0.0426,1,0.25,0.0969,0.1464,0.2119,0.017,0.9107,0.1464,0.2119,0.067,0.3617,0,0.7234,0,0.7234,0.067,0.3617,0.017,0.5362,0.25,0.0969,0.0426,1,0.9574,1,0.3706,0.0246,0.3706,0.0246,0.9574,1,0.983,0.9107,0.5,0,0.5,0,0.983,0.9107,1,0.7234,0.6294,0.0246,0.6294,0.0246,1,0.7234,0.983,0.5362,0.75,0.0969,0.983,0.4384,0.933,0.2957,0.75,0.0792,0.6294,0.0202,0.75,0.0792,0.933,0.2957,0.8536,0.1732,0.983,0.4384,0.6294,0.0202,0.5,0,1,0.5915,1,0.5915,0.5,0,0.3706,0.0202,0.983,0.7445,0.983,0.7445,0.3706,0.0202,0.25,0.0792,0.933,0.8872,0.933,0.8872,0.25,0.0792,0.1464,0.1732,0.8598,1,0.8598,1,0.1464,0.1732,0.067,0.2957,0.017,0.4384,0.8598,1,0.017,0.4384,0,0.5915,0.017,0.7445,1,0.7294,0.5,0,0.8146,1,1,0,0.5605,0,0.8614,1,0,1,0.8508,1,1,0.1297,0,1,0.8508,1,1,0.1297,0,1,0.8508,1,1,0.1297,0.4954,0.4643,0.0066,0.9557,0.6985,1,1,0.6969,0.4954,0.4643,1,0.6969,0.968,0,0.4954,0.4643,0.0066,0.9557,0.6985,1,1,0.6969,0.4954,0.4643,1,0.6969,0.968,0,0.4954,0.4643,0.0066,0.9557,0,0.9634,0.968,0,0.968,0,0,0.9634,0.052,1,1,0.6969,0.4954,0.4643,0.0066,0.9557,0.6985,1,1,0.6969,0.4954,0.4643,1,0.6969,0.968,0,0.3534,0,0,0.2521,0,0.7479,1,0,0,1,1,1,0.9757,0.0371,0.5557,0.0361]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture_23.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 918;
  var numMorphTargets = model.morphTargets.length;
  var scale = 1.93727493359;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 1052;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
