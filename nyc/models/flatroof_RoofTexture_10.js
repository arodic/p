// Converted from: ./flatroof_RoofTexture_10.obj
//  vertices: 322
//  faces: 114
//  normals: 0
//  colors: 0
//  uvs: 446
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[0,0,0.1624,1,0.845,1,1,0.0095,0,1,0.7431,1,1,0,0.263,0,1,0,0.2569,0,0,1,0.737,1,1,0,0.2569,0,0,1,0.737,1,0,1,0.7431,1,1,0,0.263,0,0,1,0.7431,1,1,0,0.263,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0.5609,0.9978,0.0024,0.9978,0,0.4926,0.0152,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0.8743,1,0.0453,0.6394,0,1,1,1,0.0589,0,0,0.087,0,1,0.1774,1,0.5,0,0,0.7381,0,0.7692,1,0.7692,0.5,0,1,0.1969,0,0.1969,0,1,1,1,1,0.3108,0,0.3108,0,1,1,1,1,0.9622,0,0.9622,0.0265,1,0.9735,1,1,0.9002,0,0.9002,0.0699,1,0.9301,1,1,0.8485,0,0.8485,0.106,1,0.894,1,0,0.6,0.9416,0,0.5509,0,0.9994,1,1,0,0.0007,0.00029999,0,1,0,1,1,1,1,0,0,0,1,1,0.2521,0,0,0.3627,0,1,1,1,0.2521,0,0,0.3627,0,1,1,1,0.2521,0,0,0.3627,0,1,0,1,1,1,1,0,0,0,0.8536,0.9787,0.1464,0.9787,0.1707,1,0.8293,1,0.1464,0.2176,0.5,0,0.3706,0.0253,0.25,0.0995,0.1464,0.2176,0.5,0,0.3706,0.0253,0.25,0.0995,0.1464,0.2004,0.5,0,0.3706,0.0233,0.25,0.0917,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0.3222,0,0,0.4346,0.0934,1,1,1,0.2778,0,0,0.4017,0,1,1,1,0.1111,0,0,0.1607,0,1,1,1,0.1667,0,0,0.241,0,1,0.3787,0,0.0118,1,1,1,0.9954,0.6168,0.0565,0.693,0.0225,0.307,0,0.4342,0.0116,0.5658,0.9884,0.4342,0.9435,0.307,0.9775,0.693,1,0.5658,0.9775,0.693,0.9435,0.307,0.8684,0.193,0.9225,0.807,0.9225,0.807,0.8684,0.193,0.7682,0.0999,0.8387,0.9001,0.8387,0.9001,0.7682,0.0999,0.6498,0.0341,0.7318,0.9659,0.7318,0.9659,0.6498,0.0341,0.5211,0,0.6091,1,0.6091,1,0.5211,0,0.3909,0,0.4789,1,0.4789,1,0.3909,0,0.2682,0.0341,0.3502,0.9659,0.3502,0.9659,0.2682,0.0341,0.1613,0.0999,0.2318,0.9001,0.2318,0.9001,0.1613,0.0999,0.0775,0.193,0.1316,0.807,0.1316,0.807,0.0775,0.193,0.0225,0.307,0.0565,0.693,0,0,0.0118,1,0.3787,0,0.8333,0,0.1667,0,1,1,1,0.241,0.8889,0,0.1111,0,1,1,1,0.1607,0.7222,0,0.2778,0,1,1,1,0.4017,0.8349,0.00010002,0.3222,0,1,1,0.059,1,0.941,1,1,0.6843,0.983,0.5072,1,0.6843,0.941,1,0.983,0.8614,0.059,1,0.983,0.5072,0.933,0.3422,0.017,0.8614,0.017,0.8614,0.933,0.3422,0.8536,0.2004,0,0.6843,0,0.6843,0.8536,0.2004,0.75,0.0917,0.017,0.5072,0.017,0.5072,0.75,0.0917,0.6294,0.0233,0.067,0.3422,0.067,0.3422,0.6294,0.0233,0.5,0,0.1464,0.2004,0.017,0.9352,0.0351,1,0.983,0.5507,0.933,0.3715,0.983,0.5507,0.0351,1,0.9649,1,1,0.7429,1,0.7429,0.9649,1,0.983,0.9352,0.017,0.9352,0.933,0.3715,0.8536,0.2176,0,0.7429,0,0.7429,0.8536,0.2176,0.75,0.0995,0.017,0.5507,0.017,0.5507,0.75,0.0995,0.6294,0.0253,0.067,0.3715,0.067,0.3715,0.6294,0.0253,0.5,0,0.1464,0.2176,0.017,0.9352,0.0351,1,0.983,0.5507,0.933,0.3715,0.983,0.5507,0.0351,1,0.9649,1,1,0.7429,1,0.7429,0.9649,1,0.983,0.9352,0.017,0.9352,0.933,0.3715,0.8536,0.2176,0,0.7429,0,0.7429,0.8536,0.2176,0.75,0.0995,0.017,0.5507,0.017,0.5507,0.75,0.0995,0.6294,0.0253,0.067,0.3715,0.067,0.3715,0.6294,0.0253,0.5,0,0.1464,0.2176,0.933,0.2867,0.8536,0.1679,0.1464,0.1679,0.067,0.2867,0.1464,0.1679,0.8536,0.1679,0.75,0.0768,0.25,0.0768,0.25,0.0768,0.75,0.0768,0.6294,0.0195,0.3706,0.0195,0.3706,0.0195,0.6294,0.0195,0.5,0,0.933,0.2867,0.067,0.2867,0.017,0.4249,0.983,0.4249,0.983,0.4249,0.017,0.4249,0,0.5733,1,0.5733,1,0.5733,0,0.5733,0.017,0.7217,0.983,0.7217,0.983,0.7217,0.017,0.7217,0.067,0.86,0.933,0.86,0.933,0.86,0.067,0.86,0.1464,0.9787,0.8536,0.9787,1,0.3627,0.7479,0,0.2521,0,1,1,1,0.3627,0.7479,0,0.2521,0,1,1,1,0.3627,0.7479,0,0.2521,0,1,1,0.0234,1,1,1,0.9416,0,0,0.6,0.594,0,0.406,0,0,0.5799,1,0.5799,1,0.5799,0,0.5799,0,0.8485,1,0.8485,0.6302,0,0.3698,0,0,0.5282,1,0.5282,1,0.5282,0,0.5282,0,0.9002,1,0.9002,0.6737,0,0.3263,0,0,0.4661,1,0.4661,1,0.4661,0,0.4661,0,0.9622,1,0.9622,0.7823,0,0.2177,0,0,0.3108,1,0.3108,0.8621,0,0.1379,0,0,0.1969,1,0.1969,0,0.7692,0.15,1,0.85,1,1,0.7692,1,0.7381,0.5,0,0.1774,1,0.8226,1,0.9411,0,0.0589,0,1,1,1,0.087,1,0,0.6848,0,0.0453,0.6394,0.8743,1,1,1,0.9978,0.0024,0,0.5609,0.2304,1]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture_10.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 966;
  var numMorphTargets = model.morphTargets.length;
  var scale = 1.78767108984;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 1120;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
