// Converted from: ./flatroof_RoofTexture_29.obj
//  vertices: 354
//  faces: 131
//  normals: 0
//  colors: 0
//  uvs: 512
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[1,1,0.8787,0.005,0.1076,0,0,1,0,0.0064,0.1644,1,1,1,0.8345,0,0,0.0064,0.1544,1,1,1,0.8446,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0.0864,0.0093,0.9136,0.0093,0.875,0,0.125,0,0.0864,0.0093,0.9136,0.0093,0.875,0,0.125,0,0.0864,0.0093,0.9136,0.0093,0.875,0,0.125,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,1,0.0061,0.1321,0,0.1912,0,1,0.9546,0.2543,0.3334,0.0351,0.0163,0.743,0.6374,0.9622,0.6211,1,0.6374,0.9622,0.0163,0.743,0,0.7808,0.6374,0.9622,0.6829,0.9796,1,0.2716,0.9546,0.2543,0.9546,0.2543,0.971,0.2192,0.3498,0,0.3334,0.0351,0.6829,0.9796,0.6374,0.9622,0.6211,1,0.6576,1,0.971,0.2192,0.9546,0.2543,1,0.2716,0.9975,0.2415,0,0.1713,1,0.1713,0.875,0,0.125,0,1,0.1881,0,0.1881,0,1,1,1,1,0.1881,0,0.1881,0,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0.0026,0.9871,1,0.7005,0.2153,0,0.2177,1,0.4498,0.0169,0.1355,0,0,0.7799,0.2177,1,0.4498,0.0169,0.1355,0,0,0.7799,0.2177,1,0.4498,0.0169,0.1355,0,0,0.7799,0.2177,1,0.4498,0.0169,0.1355,0,0,0.7799,1,0.1633,0.7381,1,0.8848,0.9659,0.9716,0.9211,0.8536,0.211,1,0.7204,0.983,0.534,0.933,0.3602,0.8536,0.193,1,0.659,0.983,0.4885,0.933,0.3295,0,0.00040001,0,1,1,1,0.999,0,0.0003,0.00029999,0,1,0.9997,1,1,0,0.0003,0.00029999,0,1,0.9997,1,1,0,0.0003,0.00029999,0,1,0.9997,1,1,0,0.0003,0.00029999,0,1,0.9997,1,1,0,0.0003,0.00029999,0,1,0.9997,1,1,0,0.0003,0.00029999,0,1,0.9997,1,1,0,0.8935,1,0.0503,0.5275,0,1,0.1853,1,0.5,0,0,0.7296,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0.1546,1,0.017,0.732,0.067,0.8723,0.1464,0.9927,0.0726,0.307,0.4611,0.0341,0.304,0.0999,0.1715,0.193,0.869,0.9659,1,0.911,0.1056,0.807,0.2181,0.9001,0.869,0.9659,0.2181,0.9001,0.361,0.9659,0.698,1,0.698,1,0.361,0.9659,0.5247,1,0.1056,0.807,1,0.911,0.9419,0.0284,0.0312,0.693,0.0312,0.693,0.9419,0.0284,0.8054,0,0,0.5658,0,0.5658,0.8054,0,0.6321,0,0.0141,0.4342,0.0141,0.4342,0.6321,0,0.4611,0.0341,0.0726,0.307,0.983,0.431,0.933,0.2908,0.8536,0.1703,0.983,0.431,0.8536,0.1703,0.75,0.0779,1,0.5815,1,0.5815,0.75,0.0779,0.6294,0.0198,0.983,0.732,0.983,0.732,0.6294,0.0198,0.5,0,0.933,0.8723,0.933,0.8723,0.5,0,0.3706,0.0198,0.8536,0.9927,0.8536,0.9927,0.3706,0.0198,0.25,0.0779,0.8454,1,0.8454,1,0.25,0.0779,0.1464,0.1703,0.067,0.2908,0.8454,1,0.067,0.2908,0.017,0.431,0,0.5815,0.8454,1,0,0.5815,0.017,0.732,0.1546,1,1,0.7296,0.5,0,0.1853,1,0.8147,1,1,0.00010002,0.5779,0,0.0503,0.5275,0.8935,1,0.067,0.9886,0.0737,1,0.3706,0.0225,0.25,0.0883,0.067,0.9886,0.25,0.0883,0.1464,0.193,0.017,0.8296,0.017,0.8296,0.1464,0.193,0.067,0.3295,0,0.659,0,0.659,0.067,0.3295,0.017,0.4885,0.3706,0.0225,0.0737,1,0.9263,1,0.5,0,0.5,0,0.9263,1,0.933,0.9886,0.6294,0.0225,0.6294,0.0225,0.933,0.9886,0.983,0.8296,0.75,0.0883,0.75,0.0883,0.983,0.8296,1,0.659,0.8536,0.193,0.017,0.9069,0.0438,1,0.5,0,0.3706,0.0245,0.017,0.9069,0.3706,0.0245,0.25,0.0965,0,0.7204,0,0.7204,0.25,0.0965,0.1464,0.211,0.017,0.534,0.017,0.534,0.1464,0.211,0.067,0.3602,0.5,0,0.0438,1,0.9562,1,0.6294,0.0245,0.6294,0.0245,0.9562,1,0.983,0.9069,0.75,0.0965,0.75,0.0965,0.983,0.9069,1,0.7204,0.8536,0.211,0.3165,0.0341,0.1892,0.0999,0.0898,0.193,0.3165,0.0341,0.0898,0.193,0.0253,0.307,0.4633,0,0.4633,0,0.0253,0.307,0,0.4342,0.6194,0,0.6194,0,0,0.4342,0.0156,0.5658,0.7742,0.0341,0.7742,0.0341,0.0156,0.5658,0.0711,0.693,0.9172,0.0999,0.9172,0.0999,0.0711,0.693,0.1627,0.807,1,0.1633,1,0.1633,0.1627,0.807,0.2841,0.9001,0.4272,0.9659,1,0.1633,0.4272,0.9659,0.582,1,0.7381,1,1,0.0169,0.4498,0.0169,0.2177,1,0.9172,0.4814,0.9172,0.4814,0.2177,1,0.8185,1,1,0.0169,0.4498,0.0169,0.2177,1,0.9172,0.4814,0.9172,0.4814,0.2177,1,0.8185,1,1,0.0169,0.4498,0.0169,0.2177,1,0.9172,0.4814,0.9172,0.4814,0.2177,1,0.8185,1,1,0.0169,0.4498,0.0169,0.2177,1,0.9172,0.4814,0.9172,0.4814,0.2177,1,0.8185,1,0,1,0.9411,1,1,0.7005,0.0026,0.9871,1,0.1881,0.875,0,0.125,0,0,0.1881,0.875,0,0.125,0,0,0.1881,1,0.1881,0,1,1,1,1,0.1713,0,0.1713,1,1,1,0.1912,0.9485,0.0365,0.9136,0.0094,0.9485,0.0365,1,0.1912,0.9939,0.1321,0.9761,0.0788,1,1,0.9136,0.0094,0.875,0,0.125,0,1,1,0.125,0,0.0864,0.0094,0.0515,0.0365,1,1,0.0515,0.0365,0.0239,0.0788,0.0061,0.1321,1,1,1,0.1907,0,0.1907,0,1,0,0.1907,1,0.1907,0.9939,0.1317,0.0061,0.1317,0.0061,0.1317,0.9939,0.1317,0.9761,0.0786,0.0239,0.0786,0.0239,0.0786,0.9761,0.0786,0.9485,0.0364,0.0515,0.0364,0.0515,0.0364,0.9485,0.0364,0.9136,0.0093,0.0864,0.0093,1,1,1,0.1907,0,0.1907,0,1,0,0.1907,1,0.1907,0.9939,0.1317,0.0061,0.1317,0.0061,0.1317,0.9939,0.1317,0.9761,0.0786,0.0239,0.0786,0.0239,0.0786,0.9761,0.0786,0.9485,0.0364,0.0515,0.0364,0.0515,0.0364,0.9485,0.0364,0.9136,0.0093,0.0864,0.0093,1,1,1,0.1907,0,0.1907,0,1,0,0.1907,1,0.1907,0.9939,0.1317,0.0061,0.1317,0.0061,0.1317,0.9939,0.1317,0.9761,0.0786,0.0239,0.0786,0.0239,0.0786,0.9761,0.0786,0.9485,0.0364,0.0515,0.0364,0.0515,0.0364,0.9485,0.0364,0.9136,0.0093,0.0864,0.0093]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture_29.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 1062;
  var numMorphTargets = model.morphTargets.length;
  var scale = 2.01153087891;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 1286;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
