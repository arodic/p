// Converted from: ./flatroof_RoofTexture_22.obj
//  vertices: 542
//  faces: 194
//  normals: 0
//  colors: 0
//  uvs: 754
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0.0001,1,1,1,0.7816,0.0122,0,0,0.0001,1,1,1,0.7872,0,0,0,0.0001,1,1,1,0.7872,0,0,0,0.0001,1,1,1,0.7872,0,0,0,1,1,0.7841,0,0,0.0019,0.0066,1,1,1,0.9237,0,0,0.0026,0.0761,1,1,1,0.9237,0,0,0.0026,0.0761,1,1,1,0.9237,0,0,0.0026,0.0761,1,1,1,0.9237,0,0,0.0026,0.0761,1,1,1,0.9237,0,0,0.0026,0.0761,1,0.7688,0,0,0.6896,0.0728,1,1,1,0.1618,0,1,0.2149,0.7659,0,0.1618,0,1,0.2149,0.7659,0,0.1618,0,1,0.2149,0.7659,0,0.1618,0,1,0.2149,0.7659,0,0.1618,0,1,0.2149,0.7659,0,0.1618,0,1,0.2149,0.7659,0,0.1618,0,1,0.2149,0.7659,0,1,1,0.7788,0.00010002,0.2203,0,0,1,1,0,0.1999,0,0,1,0.8003,1,1,0,0.1999,0,0,1,0.8003,1,1,0,0.1999,0,0,1,0.8003,1,1,0,0.1999,0,0,1,0.8003,1,1,0,0.1999,0,0,1,0.8003,1,1,0,0.1999,0,0,1,0.8003,1,0.5,0,0.8798,1,1,0.6328,0.8536,0.1853,0.0795,1,0.5,0,0.1464,0.2116,0,0.7226,0.0795,1,0.5,0,0.1464,0.2116,0,0.7226,0.8811,0,0.6027,1,0.9262,0.6618,1,0.1836,0.106,1,0.5,0,0.1464,0.1937,0,0.6614,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0.9979,0.0131,0.0186,0,0.017,0.7928,0.017,0.4668,0,0.6298,0.933,0.3782,1,0.7564,0.983,0.5606,0.933,0.3782,1,0.7564,0.983,0.5606,0.8536,0.2049,0.983,0.5185,0.933,0.3498,1,1,1,0,0,0,0,1,0.1622,0,0,1,1,1,0.5308,0,0,1,0.836,1,1,0.6911,1,0,0,0,0,1,1,1,0.0061,0.131,0.0864,0.0093,0.0515,0.0362,0.0239,0.0782,0.0061,0.131,0.0864,0.0093,0.0515,0.0362,0.0239,0.0782,0.0061,0.131,0.0864,0.0093,0.0515,0.0362,0.0239,0.0782,0.0061,0.1296,0.0855,0.0092,0.0507,0.0359,0.0237,0.0769,1,1,1,0,0,0,0,1,0.9966,0,0,0.0047,0.0034,1,1,1,0.0006,0.5039,0.9989,0,0,0,0.0006,0.5039,0.9989,0,0,0,0.0006,0.5039,0.9989,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0.9997,0,0.0005,0.0103,0,1,1,1,1,0,0.0047,0,0,1,0.9961,1,0,0.00080001,0.0042,1,1,1,0.9958,0,0.1866,0.9001,0,0.5658,0.0317,0.693,0.0954,0.807,1,0.0022,0.0041,0,0,1,0.9985,1,0.9995,0,0.0018,0,0,1,1,1,0.9995,0,0.0018,0,0,1,1,1,0.3062,0.3679,0.3062,0,0,0,0,1,0.3062,0.3679,0,1,1,1,0.6865,0.3679,0.6865,0.3679,1,1,1,0,0.6865,0,1,1,0,0.6493,0.0941,1,0.8998,0,0,1,1,1,1,0.1444,0.6748,0,0.9815,1,1,0.9733,1,0.4691,0.9257,0.6137,0.1923,1,1,1,1,1,1,0,0,0,0,1,0.0864,0.0088,0.9136,0.0088,0.875,0,0.125,0,0.0864,0.0088,0.9136,0.0088,0.875,0,0.125,0,1,1,1,0,0,0,0,1,0.968,0.5658,0.962,0.9001,0.998,0.807,1,0.693,0,0.307,0.032,0.4342,0.038,0.0999,0.002,0.193,0.038,0.0999,0.032,0.4342,0.096,0.5658,0.1055,0.0341,0.1055,0.0341,0.096,0.5658,0.1874,0.693,0.1998,0,0.1998,0,0.1874,0.693,0.3002,0.807,0.3146,0,0.3146,0,0.3002,0.807,0.4266,0.9001,0.442,0.0341,0.442,0.0341,0.4266,0.9001,0.558,0.9659,0.5734,0.0999,0.5734,0.0999,0.558,0.9659,0.6854,1,0.6998,0.193,0.6998,0.193,0.6854,1,0.8002,1,0.8126,0.307,0.8126,0.307,0.8002,1,0.8945,0.9659,0.904,0.4342,0.904,0.4342,0.8945,0.9659,0.962,0.9001,0.968,0.5658,1,1,1,0.1788,0,0.1788,0,1,0,0.1788,1,0.1788,0.9939,0.1236,0.0061,0.1236,0.0061,0.1236,0.9939,0.1236,0.9761,0.0737,0.0239,0.0737,0.0239,0.0737,0.9761,0.0737,0.9485,0.0342,0.0515,0.0342,0.0515,0.0342,0.9485,0.0342,0.9136,0.0088,0.0864,0.0088,1,1,1,0.1788,0,0.1788,0,1,0,0.1788,1,0.1788,0.9939,0.1236,0.0061,0.1236,0.0061,0.1236,0.9939,0.1236,0.9761,0.0737,0.0239,0.0737,0.0239,0.0737,0.9761,0.0737,0.9485,0.0342,0.0515,0.0342,0.0515,0.0342,0.9485,0.0342,0.9136,0.0088,0.0864,0.0088,0,0,0.1923,1,0.9257,0.6137,0.312,0,0.6748,0,0.3252,0,0,0.4691,0,0.9733,0.6748,0,0,0.9733,0.0185,1,0.9815,1,0.8998,0,0.1002,0,0,0.1444,0,1,0.7318,0,0.4141,0,0,0.6493,1,1,0.9683,0.307,0.9046,0.193,0.8134,0.0999,1,0.4342,1,0.4342,0.8134,0.0999,0.7008,0.0341,0.9977,0.5658,0.9977,0.5658,0.7008,0.0341,0.5745,0,0.9614,0.693,0.9614,0.693,0.5745,0,0.4432,0,0.8937,0.807,0.8937,0.807,0.4432,0,0.3157,0.0341,0.7992,0.9001,0.7992,0.9001,0.3157,0.0341,0.2008,0.0999,0.6843,0.9659,0.6843,0.9659,0.2008,0.0999,0.1063,0.193,0.5568,1,0.5568,1,0.1063,0.193,0.0386,0.307,0.4255,1,0.4255,1,0.0386,0.307,0.0023,0.4342,0.2992,0.9659,0.2992,0.9659,0.0023,0.4342,0,0.5658,0.1866,0.9001,0.0009,1,1,1,0.9989,0,0.0006,0.5039,0.0009,1,1,1,0.9989,0,0.0006,0.5039,0.0009,1,1,1,0.9989,0,0.0006,0.5039,1,1,1,0.188,0.9939,0.1296,0.9763,0.0769,1,1,0.9763,0.0769,0.9493,0.0359,0.9145,0.0092,1,1,0.9145,0.0092,0.876,0,0,1,0,1,0.876,0,0.124,0,0,0.188,0,0.188,0.124,0,0.0855,0.0092,0.0061,0.1296,1,1,1,0.1896,0.9939,0.131,0.9761,0.0782,1,1,0.9761,0.0782,0.9485,0.0362,0.9136,0.0093,1,1,0.9136,0.0093,0.875,0,0,1,0,1,0.875,0,0.125,0,0,0.1896,0,0.1896,0.125,0,0.0864,0.0093,0.0061,0.131,1,1,1,0.1896,0.9939,0.131,0.9761,0.0782,1,1,0.9761,0.0782,0.9485,0.0362,0.9136,0.0093,1,1,0.9136,0.0093,0.875,0,0,1,0,1,0.875,0,0.125,0,0,0.1896,0,0.1896,0.125,0,0.0864,0.0093,0.0061,0.131,1,1,1,0.1896,0.9939,0.131,0.9761,0.0782,1,1,0.9761,0.0782,0.9485,0.0362,0.9136,0.0093,1,1,0.9136,0.0093,0.875,0,0,1,0,1,0.875,0,0.125,0,0,0.1896,0,0.1896,0.125,0,0.0864,0.0093,0.0061,0.131,0.0524,1,0.9476,1,0,0.6996,0.017,0.8807,0,0.6996,0.9476,1,0.067,0.3498,0.017,0.5185,0.067,0.3498,0.9476,1,0.25,0.0937,0.1464,0.2049,0.25,0.0937,0.9476,1,0.5,0,0.3706,0.0238,0.5,0,0.9476,1,0.983,0.8807,0.6294,0.0238,0.6294,0.0238,0.983,0.8807,1,0.6996,0.75,0.0937,0.75,0.0937,1,0.6996,0.983,0.5185,0.8536,0.2049,0.017,0.9522,0.0301,1,0.9699,1,0,0.7564,0,0.7564,0.9699,1,0.067,0.3782,0.017,0.5606,0.067,0.3782,0.9699,1,0.25,0.1013,0.1464,0.2215,0.25,0.1013,0.9699,1,0.5,0,0.3706,0.0258,0.5,0,0.9699,1,0.75,0.1013,0.6294,0.0258,0.75,0.1013,0.9699,1,0.983,0.9522,0.8536,0.2215,0.8536,0.2215,0.983,0.9522,1,0.7564,0.933,0.3782,0.017,0.9522,0.0301,1,0.9699,1,0,0.7564,0,0.7564,0.9699,1,0.067,0.3782,0.017,0.5606,0.067,0.3782,0.9699,1,0.25,0.1013,0.1464,0.2215,0.25,0.1013,0.9699,1,0.5,0,0.3706,0.0258,0.5,0,0.9699,1,0.75,0.1013,0.6294,0.0258,0.75,0.1013,0.9699,1,0.983,0.9522,0.8536,0.2215,0.8536,0.2215,0.983,0.9522,1,0.7564,0.933,0.3782,0.933,0.3149,0.8536,0.1845,0.75,0.0844,0.983,0.4668,0.983,0.4668,0.75,0.0844,0.6294,0.0215,1,0.6298,1,0.6298,0.6294,0.0215,0.5,0,0.983,0.7928,0.983,0.7928,0.5,0,0.3706,0.0215,0.933,0.9447,0.933,0.9447,0.3706,0.0215,0.25,0.0844,0.8993,1,0.8993,1,0.25,0.0844,0.1464,0.1845,0.1007,1,0.1007,1,0.1464,0.1845,0.067,0.3149,0.067,0.9447,0.067,0.9447,0.067,0.3149,0.017,0.4668,0.017,0.7928,0.106,1,0.894,1,0.8536,0.1937,0.5,0,0.8536,0.1937,0.894,1,1,0.6614,0.0401,0.4022,0,0.6618,0.219,1,0.0401,0.4022,0.219,1,0.6027,1,0.8811,0,0.9205,1,1,0.7226,0.8536,0.2116,0.9205,1,0.8536,0.2116,0.5,0,0.0795,1,0.9205,1,1,0.7226,0.8536,0.2116,0.9205,1,0.8536,0.2116,0.5,0,0.0795,1,0.5,0,0.1464,0.1853,0.1202,1,0.8798,1,0.1202,1,0.1464,0.1853,0,0.6328,0,1,0.8753,1,1,0.2149,0.1618,0,0,1,0.8753,1,1,0.2149,0.1618,0,0,1,0.8753,1,1,0.2149,0.1618,0,0,1,0.8753,1,1,0.2149,0.1618,0,0,1,0.8753,1,1,0.2149,0.1618,0,0,1,0.8753,1,1,0.2149,0.1618,0,0,1,0.8753,1,1,0.2149,0.1618,0]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture_22.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 1626;
  var numMorphTargets = model.morphTargets.length;
  var scale = 1.75376129102;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 1896;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
