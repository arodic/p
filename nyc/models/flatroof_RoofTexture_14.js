// Converted from: ./flatroof_RoofTexture_14.obj
//  vertices: 481
//  faces: 148
//  normals: 0
//  colors: 0
//  uvs: 581
//  materials: 0
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "default"
	}],

    "vertices": [],
    
    "morphTargets": [],

    "morphColors": [],

    "normals": [],

    "colors": [],

    "uvs": [[1,1,0.8258,0.0026,0.1675,0,0,1,1,0,0.2221,0,0,1,0.7812,1,1,0,0.2221,0,0,1,0.7812,1,1,0,0.2221,0,0,1,0.7812,1,1,0,0.2221,0,0,1,0.7812,1,0.9999,0.0072,0.0019,0,0,1,1,1,0.9992,0,0.0013,0,0,1,1,1,0.9992,0,0.0013,0,0,1,1,1,0.9992,0,0.0013,0,0,1,1,1,0.9992,0,0.0013,0,0,1,1,1,0,1,1,1,0.156,0,0,0.9863,1,0.782,0.4897,0,0.1189,0,0,0.9863,1,0.782,0.4897,0,0.1189,0,0,0.9863,1,0.782,0.4897,0,0.1189,0,0,0.9863,1,0.782,0.4897,0,0.1189,0,0.995,0,0,0.0031,0.0011,1,1,1,0.9971,0,0.001,0,0,1,1,1,0.9971,0,0.001,0,0,1,1,1,0.9971,0,0.001,0,0,1,1,1,0,1,1,1,1,0,0,0,0.9485,0.0342,1,0.1793,0.9939,0.1239,0.9761,0.0739,0.9485,0.0342,1,0.1793,0.9939,0.1239,0.9761,0.0739,0.9485,0.0342,1,0.1793,0.9939,0.1239,0.9761,0.0739,0.9485,0.0342,1,0.1793,0.9939,0.1239,0.9761,0.0739,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0.8272,0,0,0.6045,0.0696,1,1,1,0,1,1,0.2172,0.7428,0,0.1113,0,0,1,1,0.2172,0.7428,0,0.1113,0,0,1,1,0.2172,0.7428,0,0.1113,0,0,1,1,0.2172,0.7428,0,0.1113,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0.3534,0,0.3534,0,1,1,1,1,0.3534,0,0.3534,0,1,1,1,0,1,1,1,1,0,0,0,1,1,0.8647,0,0.2083,0.0028,0,1,0,1,0.7545,1,1,0,0.2484,0,0,1,0.7545,1,1,0,0.2484,0,0,1,0.7545,1,1,0,0.2484,0,0,1,0.7545,1,1,0,0.2484,0,0,1,0.7545,1,1,0,0.2484,0,0.0061,0.1329,0.0864,0.0094,0.0515,0.0367,0.0239,0.0793,0.0864,0.0087,0.9136,0.0087,0.875,0,0.125,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0.9294,1,0.9294,1,0,1,1,1,0.9294,0,0.9294,0,1,1,0.9355,1,0,0,0,0,0.9355,0,0.9355,0,1,1,1,1,0.9355,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0.875,0,0.125,0,0,0.1845,0,1,0.875,0,0.125,0,0,0.1845,1,1,1,0,0,0,0,1,0.9825,0.8658,0,1,1,1,0.9402,0.5313,0.0038,1,1,1,0.9402,0.5313,0.0038,1,1,1,0.9402,0.5313,0.0038,1,1,1,0.9402,0.5313,0.0038,1,1,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,0.8847,0,0,0,0.0038,1,0.9402,0.5313,0.8847,0,0,0,0.0038,1,0.9402,0.5313,0.8847,0,0,0,0.0038,1,0.9402,0.5313,0.8847,0,0,0,0.0038,1,0.9402,0.5313,0.8935,0.0548,0.0031,0,0,1,0.8971,0.0952,0.8971,0.0952,0,1,0.9825,0.8658,1,1,1,0.1845,0.875,0,0,1,1,1,1,0.1845,0.875,0,0,1,0,1,1,1,1,0.1786,0,0.1786,0,0.1786,1,0.1786,0.9939,0.1234,0.0061,0.1234,0.0061,0.1234,0.9939,0.1234,0.9761,0.0736,0.0239,0.0736,0.0239,0.0736,0.9761,0.0736,0.9485,0.0341,0.0515,0.0341,0.0515,0.0341,0.9485,0.0341,0.9136,0.0087,0.0864,0.0087,0.875,0,0.125,0,0,0.1923,0,1,0.875,0,0,1,1,1,0.9136,0.0094,0.9136,0.0094,1,1,0.9761,0.0793,0.9485,0.0367,0.9761,0.0793,1,1,1,0.1923,0.9939,0.1329,0,0.1923,0.125,0,0.0864,0.0094,0.0061,0.1329,1,0.3534,0.7479,0,0.2521,0,0,0.3534,1,0.3534,0.7479,0,0.2521,0,0,0.3534,0,1,0.915,1,1,0.2172,0,1,0.915,1,1,0.2172,0,1,0.915,1,1,0.2172,0,1,0.915,1,1,0.2172,1,1,1,0.1793,0.9485,0.0342,0.9136,0.0088,1,1,0.9136,0.0088,0.875,0,0,1,0,1,0.875,0,0.125,0,0,0.1793,0,0.1793,0.125,0,0.0864,0.0088,0.0061,0.1239,0.0061,0.1239,0.0864,0.0088,0.0515,0.0342,0.0239,0.0739,1,1,1,0.1793,0.9485,0.0342,0.9136,0.0088,1,1,0.9136,0.0088,0.875,0,0,1,0,1,0.875,0,0.125,0,0,0.1793,0,0.1793,0.125,0,0.0864,0.0088,0.0061,0.1239,0.0061,0.1239,0.0864,0.0088,0.0515,0.0342,0.0239,0.0739,1,1,1,0.1793,0.9485,0.0342,0.9136,0.0088,1,1,0.9136,0.0088,0.875,0,0,1,0,1,0.875,0,0.125,0,0,0.1793,0,0.1793,0.125,0,0.0864,0.0088,0.0061,0.1239,0.0061,0.1239,0.0864,0.0088,0.0515,0.0342,0.0239,0.0739,1,1,1,0.1793,0.9485,0.0342,0.9136,0.0088,1,1,0.9136,0.0088,0.875,0,0,1,0,1,0.875,0,0.125,0,0,0.1793,0,0.1793,0.125,0,0.0864,0.0088,0.0061,0.1239,0.0061,0.1239,0.0864,0.0088,0.0515,0.0342,0.0239,0.0739,0.1771,1,0.9765,1,1,0.782,0,0.9863,0.1771,1,0.9765,1,1,0.782,0,0.9863,0.1771,1,0.9765,1,1,0.782,0,0.9863,0.1771,1,0.9765,1,1,0.782,0,0.9863]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "flatroof_RoofTexture_14.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 1443;
  var numMorphTargets = model.morphTargets.length;
  var scale = 2.02860640625;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 1458;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
